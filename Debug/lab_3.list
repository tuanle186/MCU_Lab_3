
lab_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000262c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002738  08002738  00012738  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800275c  0800275c  0002003c  2**0
                  CONTENTS
  4 .ARM          00000000  0800275c  0800275c  0002003c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800275c  0800275c  0002003c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800275c  0800275c  0001275c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002760  08002760  00012760  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000003c  20000000  08002764  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a8  2000003c  080027a0  0002003c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000e4  080027a0  000200e4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009872  00000000  00000000  00020065  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c73  00000000  00000000  000298d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a78  00000000  00000000  0002b550  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000960  00000000  00000000  0002bfc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016fb0  00000000  00000000  0002c928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c639  00000000  00000000  000438d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082521  00000000  00000000  0004ff11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d2432  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002900  00000000  00000000  000d2488  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000003c 	.word	0x2000003c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002720 	.word	0x08002720

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000040 	.word	0x20000040
 8000148:	08002720 	.word	0x08002720

0800014c <fsm_automatic>:
#include "fsm_automatic.h"
#include "timer.h"
#include "input_reading.h"
#include "seven_seg.h"

void fsm_automatic() {
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	switch (status) {
 8000150:	4b34      	ldr	r3, [pc, #208]	; (8000224 <fsm_automatic+0xd8>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	3301      	adds	r3, #1
 8000156:	2b05      	cmp	r3, #5
 8000158:	d859      	bhi.n	800020e <fsm_automatic+0xc2>
 800015a:	a201      	add	r2, pc, #4	; (adr r2, 8000160 <fsm_automatic+0x14>)
 800015c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000160:	08000179 	.word	0x08000179
 8000164:	08000181 	.word	0x08000181
 8000168:	08000197 	.word	0x08000197
 800016c:	080001b5 	.word	0x080001b5
 8000170:	080001d3 	.word	0x080001d3
 8000174:	080001f1 	.word	0x080001f1
		case INIT:
			status = MODE1;
 8000178:	4b2a      	ldr	r3, [pc, #168]	; (8000224 <fsm_automatic+0xd8>)
 800017a:	2200      	movs	r2, #0
 800017c:	601a      	str	r2, [r3, #0]
			break;
 800017e:	e04f      	b.n	8000220 <fsm_automatic+0xd4>
		case MODE1:
			led_config();
 8000180:	f000 f914 	bl	80003ac <led_config>
			setTimer0(T_GREEN);
 8000184:	4b28      	ldr	r3, [pc, #160]	; (8000228 <fsm_automatic+0xdc>)
 8000186:	681b      	ldr	r3, [r3, #0]
 8000188:	4618      	mov	r0, r3
 800018a:	f000 feaf 	bl	8000eec <setTimer0>
			status = RED_GREEN;
 800018e:	4b25      	ldr	r3, [pc, #148]	; (8000224 <fsm_automatic+0xd8>)
 8000190:	2201      	movs	r2, #1
 8000192:	601a      	str	r2, [r3, #0]
			break;
 8000194:	e044      	b.n	8000220 <fsm_automatic+0xd4>
		case RED_GREEN:
			led_config();
 8000196:	f000 f909 	bl	80003ac <led_config>
			if (timer0_flag == 1) {
 800019a:	4b24      	ldr	r3, [pc, #144]	; (800022c <fsm_automatic+0xe0>)
 800019c:	681b      	ldr	r3, [r3, #0]
 800019e:	2b01      	cmp	r3, #1
 80001a0:	d137      	bne.n	8000212 <fsm_automatic+0xc6>
				setTimer0(T_AMBER);
 80001a2:	4b23      	ldr	r3, [pc, #140]	; (8000230 <fsm_automatic+0xe4>)
 80001a4:	681b      	ldr	r3, [r3, #0]
 80001a6:	4618      	mov	r0, r3
 80001a8:	f000 fea0 	bl	8000eec <setTimer0>
				status = RED_AMBER;
 80001ac:	4b1d      	ldr	r3, [pc, #116]	; (8000224 <fsm_automatic+0xd8>)
 80001ae:	2202      	movs	r2, #2
 80001b0:	601a      	str	r2, [r3, #0]
			}
			break;
 80001b2:	e02e      	b.n	8000212 <fsm_automatic+0xc6>
		case RED_AMBER:
			led_config();
 80001b4:	f000 f8fa 	bl	80003ac <led_config>
			if (timer0_flag == 1) {
 80001b8:	4b1c      	ldr	r3, [pc, #112]	; (800022c <fsm_automatic+0xe0>)
 80001ba:	681b      	ldr	r3, [r3, #0]
 80001bc:	2b01      	cmp	r3, #1
 80001be:	d12a      	bne.n	8000216 <fsm_automatic+0xca>
				setTimer0(T_GREEN);
 80001c0:	4b19      	ldr	r3, [pc, #100]	; (8000228 <fsm_automatic+0xdc>)
 80001c2:	681b      	ldr	r3, [r3, #0]
 80001c4:	4618      	mov	r0, r3
 80001c6:	f000 fe91 	bl	8000eec <setTimer0>
				status = GREEN_RED;
 80001ca:	4b16      	ldr	r3, [pc, #88]	; (8000224 <fsm_automatic+0xd8>)
 80001cc:	2203      	movs	r2, #3
 80001ce:	601a      	str	r2, [r3, #0]
			}
			break;
 80001d0:	e021      	b.n	8000216 <fsm_automatic+0xca>
		case GREEN_RED:
			led_config();
 80001d2:	f000 f8eb 	bl	80003ac <led_config>
			if (timer0_flag == 1) {
 80001d6:	4b15      	ldr	r3, [pc, #84]	; (800022c <fsm_automatic+0xe0>)
 80001d8:	681b      	ldr	r3, [r3, #0]
 80001da:	2b01      	cmp	r3, #1
 80001dc:	d11d      	bne.n	800021a <fsm_automatic+0xce>
				setTimer0(T_AMBER);
 80001de:	4b14      	ldr	r3, [pc, #80]	; (8000230 <fsm_automatic+0xe4>)
 80001e0:	681b      	ldr	r3, [r3, #0]
 80001e2:	4618      	mov	r0, r3
 80001e4:	f000 fe82 	bl	8000eec <setTimer0>
				status = AMBER_RED;
 80001e8:	4b0e      	ldr	r3, [pc, #56]	; (8000224 <fsm_automatic+0xd8>)
 80001ea:	2204      	movs	r2, #4
 80001ec:	601a      	str	r2, [r3, #0]
			}
			break;
 80001ee:	e014      	b.n	800021a <fsm_automatic+0xce>
		case AMBER_RED:
			led_config();
 80001f0:	f000 f8dc 	bl	80003ac <led_config>
			if (timer0_flag == 1) {
 80001f4:	4b0d      	ldr	r3, [pc, #52]	; (800022c <fsm_automatic+0xe0>)
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	2b01      	cmp	r3, #1
 80001fa:	d110      	bne.n	800021e <fsm_automatic+0xd2>
				setTimer0(T_GREEN);
 80001fc:	4b0a      	ldr	r3, [pc, #40]	; (8000228 <fsm_automatic+0xdc>)
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	4618      	mov	r0, r3
 8000202:	f000 fe73 	bl	8000eec <setTimer0>
				status = RED_GREEN;
 8000206:	4b07      	ldr	r3, [pc, #28]	; (8000224 <fsm_automatic+0xd8>)
 8000208:	2201      	movs	r2, #1
 800020a:	601a      	str	r2, [r3, #0]
			}
			break;
 800020c:	e007      	b.n	800021e <fsm_automatic+0xd2>
		default:
			break;
 800020e:	bf00      	nop
 8000210:	e006      	b.n	8000220 <fsm_automatic+0xd4>
			break;
 8000212:	bf00      	nop
 8000214:	e004      	b.n	8000220 <fsm_automatic+0xd4>
			break;
 8000216:	bf00      	nop
 8000218:	e002      	b.n	8000220 <fsm_automatic+0xd4>
			break;
 800021a:	bf00      	nop
 800021c:	e000      	b.n	8000220 <fsm_automatic+0xd4>
			break;
 800021e:	bf00      	nop
	}
}
 8000220:	bf00      	nop
 8000222:	bd80      	pop	{r7, pc}
 8000224:	2000000c 	.word	0x2000000c
 8000228:	20000008 	.word	0x20000008
 800022c:	20000084 	.word	0x20000084
 8000230:	20000004 	.word	0x20000004

08000234 <fsm_red_manual>:
#include "main.h"
#include "global.h"
#include "fsm_manual.h"
#include "timer.h"

void fsm_red_manual() {
 8000234:	b580      	push	{r7, lr}
 8000236:	af00      	add	r7, sp, #0
	switch(status) {
 8000238:	4b1a      	ldr	r3, [pc, #104]	; (80002a4 <fsm_red_manual+0x70>)
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	2b07      	cmp	r3, #7
 800023e:	d01d      	beq.n	800027c <fsm_red_manual+0x48>
 8000240:	2b07      	cmp	r3, #7
 8000242:	dc28      	bgt.n	8000296 <fsm_red_manual+0x62>
 8000244:	2b05      	cmp	r3, #5
 8000246:	d002      	beq.n	800024e <fsm_red_manual+0x1a>
 8000248:	2b06      	cmp	r3, #6
 800024a:	d00a      	beq.n	8000262 <fsm_red_manual+0x2e>
				HAL_GPIO_TogglePin(GPIOB, red_1_Pin | red_2_Pin);
				setTimer1(500);
			}
			break;
		default:
			break;
 800024c:	e023      	b.n	8000296 <fsm_red_manual+0x62>
			led_config();
 800024e:	f000 f8ad 	bl	80003ac <led_config>
			setTimer1(500); // for blinking red leds
 8000252:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000256:	f000 fe63 	bl	8000f20 <setTimer1>
			status = AUTO_RED;
 800025a:	4b12      	ldr	r3, [pc, #72]	; (80002a4 <fsm_red_manual+0x70>)
 800025c:	2206      	movs	r2, #6
 800025e:	601a      	str	r2, [r3, #0]
			break;
 8000260:	e01e      	b.n	80002a0 <fsm_red_manual+0x6c>
			if (timer1_flag == 1) {
 8000262:	4b11      	ldr	r3, [pc, #68]	; (80002a8 <fsm_red_manual+0x74>)
 8000264:	681b      	ldr	r3, [r3, #0]
 8000266:	2b01      	cmp	r3, #1
 8000268:	d117      	bne.n	800029a <fsm_red_manual+0x66>
				HAL_GPIO_TogglePin(GPIOB, red_1_Pin | red_2_Pin);
 800026a:	2148      	movs	r1, #72	; 0x48
 800026c:	480f      	ldr	r0, [pc, #60]	; (80002ac <fsm_red_manual+0x78>)
 800026e:	f001 fa4e 	bl	800170e <HAL_GPIO_TogglePin>
				setTimer1(500);
 8000272:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000276:	f000 fe53 	bl	8000f20 <setTimer1>
			break;
 800027a:	e00e      	b.n	800029a <fsm_red_manual+0x66>
			if (timer1_flag == 1) {
 800027c:	4b0a      	ldr	r3, [pc, #40]	; (80002a8 <fsm_red_manual+0x74>)
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	2b01      	cmp	r3, #1
 8000282:	d10c      	bne.n	800029e <fsm_red_manual+0x6a>
				HAL_GPIO_TogglePin(GPIOB, red_1_Pin | red_2_Pin);
 8000284:	2148      	movs	r1, #72	; 0x48
 8000286:	4809      	ldr	r0, [pc, #36]	; (80002ac <fsm_red_manual+0x78>)
 8000288:	f001 fa41 	bl	800170e <HAL_GPIO_TogglePin>
				setTimer1(500);
 800028c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000290:	f000 fe46 	bl	8000f20 <setTimer1>
			break;
 8000294:	e003      	b.n	800029e <fsm_red_manual+0x6a>
			break;
 8000296:	bf00      	nop
 8000298:	e002      	b.n	80002a0 <fsm_red_manual+0x6c>
			break;
 800029a:	bf00      	nop
 800029c:	e000      	b.n	80002a0 <fsm_red_manual+0x6c>
			break;
 800029e:	bf00      	nop
	}
}
 80002a0:	bf00      	nop
 80002a2:	bd80      	pop	{r7, pc}
 80002a4:	2000000c 	.word	0x2000000c
 80002a8:	20000088 	.word	0x20000088
 80002ac:	40010c00 	.word	0x40010c00

080002b0 <fsm_amber_manual>:

void fsm_amber_manual() {
 80002b0:	b580      	push	{r7, lr}
 80002b2:	af00      	add	r7, sp, #0
	switch(status) {
 80002b4:	4b1a      	ldr	r3, [pc, #104]	; (8000320 <fsm_amber_manual+0x70>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	2b0a      	cmp	r3, #10
 80002ba:	d01d      	beq.n	80002f8 <fsm_amber_manual+0x48>
 80002bc:	2b0a      	cmp	r3, #10
 80002be:	dc28      	bgt.n	8000312 <fsm_amber_manual+0x62>
 80002c0:	2b08      	cmp	r3, #8
 80002c2:	d002      	beq.n	80002ca <fsm_amber_manual+0x1a>
 80002c4:	2b09      	cmp	r3, #9
 80002c6:	d00a      	beq.n	80002de <fsm_amber_manual+0x2e>
				HAL_GPIO_TogglePin(GPIOB, amber_1_Pin | amber_2_Pin);
				setTimer1(500);
			}
			break;
		default:
			break;
 80002c8:	e023      	b.n	8000312 <fsm_amber_manual+0x62>
			led_config();
 80002ca:	f000 f86f 	bl	80003ac <led_config>
			setTimer1(500); // for blinking amber leds
 80002ce:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80002d2:	f000 fe25 	bl	8000f20 <setTimer1>
			status = AUTO_AMBER;
 80002d6:	4b12      	ldr	r3, [pc, #72]	; (8000320 <fsm_amber_manual+0x70>)
 80002d8:	2209      	movs	r2, #9
 80002da:	601a      	str	r2, [r3, #0]
			break;
 80002dc:	e01e      	b.n	800031c <fsm_amber_manual+0x6c>
			if (timer1_flag == 1) {
 80002de:	4b11      	ldr	r3, [pc, #68]	; (8000324 <fsm_amber_manual+0x74>)
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	2b01      	cmp	r3, #1
 80002e4:	d117      	bne.n	8000316 <fsm_amber_manual+0x66>
				HAL_GPIO_TogglePin(GPIOB, amber_1_Pin | amber_2_Pin);
 80002e6:	2190      	movs	r1, #144	; 0x90
 80002e8:	480f      	ldr	r0, [pc, #60]	; (8000328 <fsm_amber_manual+0x78>)
 80002ea:	f001 fa10 	bl	800170e <HAL_GPIO_TogglePin>
				setTimer1(500);
 80002ee:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80002f2:	f000 fe15 	bl	8000f20 <setTimer1>
			break;
 80002f6:	e00e      	b.n	8000316 <fsm_amber_manual+0x66>
			if (timer1_flag == 1) {
 80002f8:	4b0a      	ldr	r3, [pc, #40]	; (8000324 <fsm_amber_manual+0x74>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	2b01      	cmp	r3, #1
 80002fe:	d10c      	bne.n	800031a <fsm_amber_manual+0x6a>
				HAL_GPIO_TogglePin(GPIOB, amber_1_Pin | amber_2_Pin);
 8000300:	2190      	movs	r1, #144	; 0x90
 8000302:	4809      	ldr	r0, [pc, #36]	; (8000328 <fsm_amber_manual+0x78>)
 8000304:	f001 fa03 	bl	800170e <HAL_GPIO_TogglePin>
				setTimer1(500);
 8000308:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800030c:	f000 fe08 	bl	8000f20 <setTimer1>
			break;
 8000310:	e003      	b.n	800031a <fsm_amber_manual+0x6a>
			break;
 8000312:	bf00      	nop
 8000314:	e002      	b.n	800031c <fsm_amber_manual+0x6c>
			break;
 8000316:	bf00      	nop
 8000318:	e000      	b.n	800031c <fsm_amber_manual+0x6c>
			break;
 800031a:	bf00      	nop
	}
}
 800031c:	bf00      	nop
 800031e:	bd80      	pop	{r7, pc}
 8000320:	2000000c 	.word	0x2000000c
 8000324:	20000088 	.word	0x20000088
 8000328:	40010c00 	.word	0x40010c00

0800032c <fsm_green_manual>:

void fsm_green_manual() {
 800032c:	b580      	push	{r7, lr}
 800032e:	af00      	add	r7, sp, #0
	switch(status) {
 8000330:	4b1b      	ldr	r3, [pc, #108]	; (80003a0 <fsm_green_manual+0x74>)
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	2b0d      	cmp	r3, #13
 8000336:	d01e      	beq.n	8000376 <fsm_green_manual+0x4a>
 8000338:	2b0d      	cmp	r3, #13
 800033a:	dc2a      	bgt.n	8000392 <fsm_green_manual+0x66>
 800033c:	2b0b      	cmp	r3, #11
 800033e:	d002      	beq.n	8000346 <fsm_green_manual+0x1a>
 8000340:	2b0c      	cmp	r3, #12
 8000342:	d00a      	beq.n	800035a <fsm_green_manual+0x2e>
				HAL_GPIO_TogglePin(GPIOB, green_1_Pin | green_2_Pin);
				setTimer1(500);
			}
			break;
		default:
			break;
 8000344:	e025      	b.n	8000392 <fsm_green_manual+0x66>
			led_config();
 8000346:	f000 f831 	bl	80003ac <led_config>
			setTimer1(500); // for blinking green leds
 800034a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800034e:	f000 fde7 	bl	8000f20 <setTimer1>
			status = AUTO_GREEN;
 8000352:	4b13      	ldr	r3, [pc, #76]	; (80003a0 <fsm_green_manual+0x74>)
 8000354:	220c      	movs	r2, #12
 8000356:	601a      	str	r2, [r3, #0]
			break;
 8000358:	e020      	b.n	800039c <fsm_green_manual+0x70>
			if (timer1_flag == 1) {
 800035a:	4b12      	ldr	r3, [pc, #72]	; (80003a4 <fsm_green_manual+0x78>)
 800035c:	681b      	ldr	r3, [r3, #0]
 800035e:	2b01      	cmp	r3, #1
 8000360:	d119      	bne.n	8000396 <fsm_green_manual+0x6a>
				HAL_GPIO_TogglePin(GPIOB, green_1_Pin | green_2_Pin);
 8000362:	f44f 7190 	mov.w	r1, #288	; 0x120
 8000366:	4810      	ldr	r0, [pc, #64]	; (80003a8 <fsm_green_manual+0x7c>)
 8000368:	f001 f9d1 	bl	800170e <HAL_GPIO_TogglePin>
				setTimer1(500);
 800036c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000370:	f000 fdd6 	bl	8000f20 <setTimer1>
			break;
 8000374:	e00f      	b.n	8000396 <fsm_green_manual+0x6a>
			if (timer1_flag == 1) {
 8000376:	4b0b      	ldr	r3, [pc, #44]	; (80003a4 <fsm_green_manual+0x78>)
 8000378:	681b      	ldr	r3, [r3, #0]
 800037a:	2b01      	cmp	r3, #1
 800037c:	d10d      	bne.n	800039a <fsm_green_manual+0x6e>
				HAL_GPIO_TogglePin(GPIOB, green_1_Pin | green_2_Pin);
 800037e:	f44f 7190 	mov.w	r1, #288	; 0x120
 8000382:	4809      	ldr	r0, [pc, #36]	; (80003a8 <fsm_green_manual+0x7c>)
 8000384:	f001 f9c3 	bl	800170e <HAL_GPIO_TogglePin>
				setTimer1(500);
 8000388:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800038c:	f000 fdc8 	bl	8000f20 <setTimer1>
			break;
 8000390:	e003      	b.n	800039a <fsm_green_manual+0x6e>
			break;
 8000392:	bf00      	nop
 8000394:	e002      	b.n	800039c <fsm_green_manual+0x70>
			break;
 8000396:	bf00      	nop
 8000398:	e000      	b.n	800039c <fsm_green_manual+0x70>
			break;
 800039a:	bf00      	nop
	}
}
 800039c:	bf00      	nop
 800039e:	bd80      	pop	{r7, pc}
 80003a0:	2000000c 	.word	0x2000000c
 80003a4:	20000088 	.word	0x20000088
 80003a8:	40010c00 	.word	0x40010c00

080003ac <led_config>:
int T_AMBER = 2000;
int T_GREEN = 3000;

int status = INIT;

void led_config() {
 80003ac:	b580      	push	{r7, lr}
 80003ae:	af00      	add	r7, sp, #0
	switch (status) {
 80003b0:	4b3d      	ldr	r3, [pc, #244]	; (80004a8 <led_config+0xfc>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	2b0b      	cmp	r3, #11
 80003b6:	d874      	bhi.n	80004a2 <led_config+0xf6>
 80003b8:	a201      	add	r2, pc, #4	; (adr r2, 80003c0 <led_config+0x14>)
 80003ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003be:	bf00      	nop
 80003c0:	080003f1 	.word	0x080003f1
 80003c4:	080003ff 	.word	0x080003ff
 80003c8:	08000417 	.word	0x08000417
 80003cc:	0800042f 	.word	0x0800042f
 80003d0:	08000445 	.word	0x08000445
 80003d4:	0800045b 	.word	0x0800045b
 80003d8:	080004a3 	.word	0x080004a3
 80003dc:	080004a3 	.word	0x080004a3
 80003e0:	08000473 	.word	0x08000473
 80003e4:	080004a3 	.word	0x080004a3
 80003e8:	080004a3 	.word	0x080004a3
 80003ec:	0800048b 	.word	0x0800048b
		case MODE1:
			HAL_GPIO_WritePin(GPIOB, red_1_Pin | red_2_Pin | amber_1_Pin | amber_2_Pin | green_1_Pin | green_2_Pin, GPIO_PIN_SET);
 80003f0:	2201      	movs	r2, #1
 80003f2:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
 80003f6:	482d      	ldr	r0, [pc, #180]	; (80004ac <led_config+0x100>)
 80003f8:	f001 f971 	bl	80016de <HAL_GPIO_WritePin>
			break;
 80003fc:	e052      	b.n	80004a4 <led_config+0xf8>

		case RED_GREEN:
			HAL_GPIO_WritePin(GPIOB, red_1_Pin | green_2_Pin, GPIO_PIN_RESET);
 80003fe:	2200      	movs	r2, #0
 8000400:	f44f 7184 	mov.w	r1, #264	; 0x108
 8000404:	4829      	ldr	r0, [pc, #164]	; (80004ac <led_config+0x100>)
 8000406:	f001 f96a 	bl	80016de <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, amber_1_Pin | red_2_Pin, GPIO_PIN_SET);
 800040a:	2201      	movs	r2, #1
 800040c:	2150      	movs	r1, #80	; 0x50
 800040e:	4827      	ldr	r0, [pc, #156]	; (80004ac <led_config+0x100>)
 8000410:	f001 f965 	bl	80016de <HAL_GPIO_WritePin>
			break;
 8000414:	e046      	b.n	80004a4 <led_config+0xf8>

		case RED_AMBER:
			HAL_GPIO_WritePin(GPIOB, green_2_Pin, GPIO_PIN_SET);
 8000416:	2201      	movs	r2, #1
 8000418:	f44f 7180 	mov.w	r1, #256	; 0x100
 800041c:	4823      	ldr	r0, [pc, #140]	; (80004ac <led_config+0x100>)
 800041e:	f001 f95e 	bl	80016de <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, amber_2_Pin, GPIO_PIN_RESET);
 8000422:	2200      	movs	r2, #0
 8000424:	2180      	movs	r1, #128	; 0x80
 8000426:	4821      	ldr	r0, [pc, #132]	; (80004ac <led_config+0x100>)
 8000428:	f001 f959 	bl	80016de <HAL_GPIO_WritePin>
			break;
 800042c:	e03a      	b.n	80004a4 <led_config+0xf8>

		case GREEN_RED:
			HAL_GPIO_WritePin(GPIOB, green_1_Pin | red_2_Pin, GPIO_PIN_RESET);
 800042e:	2200      	movs	r2, #0
 8000430:	2160      	movs	r1, #96	; 0x60
 8000432:	481e      	ldr	r0, [pc, #120]	; (80004ac <led_config+0x100>)
 8000434:	f001 f953 	bl	80016de <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, red_1_Pin | amber_2_Pin, GPIO_PIN_SET);
 8000438:	2201      	movs	r2, #1
 800043a:	2188      	movs	r1, #136	; 0x88
 800043c:	481b      	ldr	r0, [pc, #108]	; (80004ac <led_config+0x100>)
 800043e:	f001 f94e 	bl	80016de <HAL_GPIO_WritePin>
			break;
 8000442:	e02f      	b.n	80004a4 <led_config+0xf8>

		case AMBER_RED:
			HAL_GPIO_WritePin(GPIOB, green_1_Pin, GPIO_PIN_SET);
 8000444:	2201      	movs	r2, #1
 8000446:	2120      	movs	r1, #32
 8000448:	4818      	ldr	r0, [pc, #96]	; (80004ac <led_config+0x100>)
 800044a:	f001 f948 	bl	80016de <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, amber_1_Pin, GPIO_PIN_RESET);
 800044e:	2200      	movs	r2, #0
 8000450:	2110      	movs	r1, #16
 8000452:	4816      	ldr	r0, [pc, #88]	; (80004ac <led_config+0x100>)
 8000454:	f001 f943 	bl	80016de <HAL_GPIO_WritePin>
			break;
 8000458:	e024      	b.n	80004a4 <led_config+0xf8>

		case MODE2:
			HAL_GPIO_WritePin(GPIOB, amber_1_Pin | amber_2_Pin | green_1_Pin | green_2_Pin, GPIO_PIN_SET);
 800045a:	2201      	movs	r2, #1
 800045c:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8000460:	4812      	ldr	r0, [pc, #72]	; (80004ac <led_config+0x100>)
 8000462:	f001 f93c 	bl	80016de <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, red_1_Pin | red_2_Pin, GPIO_PIN_RESET);
 8000466:	2200      	movs	r2, #0
 8000468:	2148      	movs	r1, #72	; 0x48
 800046a:	4810      	ldr	r0, [pc, #64]	; (80004ac <led_config+0x100>)
 800046c:	f001 f937 	bl	80016de <HAL_GPIO_WritePin>
			break;
 8000470:	e018      	b.n	80004a4 <led_config+0xf8>

		case MODE3:
			HAL_GPIO_WritePin(GPIOB, red_1_Pin | red_2_Pin | green_1_Pin | green_2_Pin, GPIO_PIN_SET);
 8000472:	2201      	movs	r2, #1
 8000474:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8000478:	480c      	ldr	r0, [pc, #48]	; (80004ac <led_config+0x100>)
 800047a:	f001 f930 	bl	80016de <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, amber_1_Pin | amber_2_Pin, GPIO_PIN_RESET);
 800047e:	2200      	movs	r2, #0
 8000480:	2190      	movs	r1, #144	; 0x90
 8000482:	480a      	ldr	r0, [pc, #40]	; (80004ac <led_config+0x100>)
 8000484:	f001 f92b 	bl	80016de <HAL_GPIO_WritePin>
			break;
 8000488:	e00c      	b.n	80004a4 <led_config+0xf8>

		case MODE4:
			HAL_GPIO_WritePin(GPIOB, red_1_Pin | red_2_Pin | amber_1_Pin | amber_2_Pin, GPIO_PIN_SET);
 800048a:	2201      	movs	r2, #1
 800048c:	21d8      	movs	r1, #216	; 0xd8
 800048e:	4807      	ldr	r0, [pc, #28]	; (80004ac <led_config+0x100>)
 8000490:	f001 f925 	bl	80016de <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, green_1_Pin | green_2_Pin, GPIO_PIN_RESET);
 8000494:	2200      	movs	r2, #0
 8000496:	f44f 7190 	mov.w	r1, #288	; 0x120
 800049a:	4804      	ldr	r0, [pc, #16]	; (80004ac <led_config+0x100>)
 800049c:	f001 f91f 	bl	80016de <HAL_GPIO_WritePin>
			break;
 80004a0:	e000      	b.n	80004a4 <led_config+0xf8>

		default:
			break;
 80004a2:	bf00      	nop
	}
}
 80004a4:	bf00      	nop
 80004a6:	bd80      	pop	{r7, pc}
 80004a8:	2000000c 	.word	0x2000000c
 80004ac:	40010c00 	.word	0x40010c00

080004b0 <fsm_button_processing>:
enum ButtonState{BUTTON_RELEASED, BUTTON_PRESSED, BUTTON_PRESSED_MORE_THAN_1_SECOND};
enum ButtonState button_1_state = BUTTON_PRESSED;
enum ButtonState button_2_state = BUTTON_PRESSED;
enum ButtonState button_3_state = BUTTON_PRESSED;

void fsm_button_processing() {
 80004b0:	b580      	push	{r7, lr}
 80004b2:	af00      	add	r7, sp, #0
	switch (button_1_state) {
 80004b4:	4ba0      	ldr	r3, [pc, #640]	; (8000738 <fsm_button_processing+0x288>)
 80004b6:	781b      	ldrb	r3, [r3, #0]
 80004b8:	2b02      	cmp	r3, #2
 80004ba:	d040      	beq.n	800053e <fsm_button_processing+0x8e>
 80004bc:	2b02      	cmp	r3, #2
 80004be:	dc4d      	bgt.n	800055c <fsm_button_processing+0xac>
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d002      	beq.n	80004ca <fsm_button_processing+0x1a>
 80004c4:	2b01      	cmp	r3, #1
 80004c6:	d026      	beq.n	8000516 <fsm_button_processing+0x66>
 80004c8:	e048      	b.n	800055c <fsm_button_processing+0xac>
		case BUTTON_RELEASED:
			if (is_button_pressed(0)) {
 80004ca:	2000      	movs	r0, #0
 80004cc:	f000 f9c6 	bl	800085c <is_button_pressed>
 80004d0:	4603      	mov	r3, r0
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d03d      	beq.n	8000552 <fsm_button_processing+0xa2>
				button_1_state = BUTTON_PRESSED;
 80004d6:	4b98      	ldr	r3, [pc, #608]	; (8000738 <fsm_button_processing+0x288>)
 80004d8:	2201      	movs	r2, #1
 80004da:	701a      	strb	r2, [r3, #0]
				// TODO if button1 is pressed
				if (status == RED_GREEN) {
 80004dc:	4b97      	ldr	r3, [pc, #604]	; (800073c <fsm_button_processing+0x28c>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	2b01      	cmp	r3, #1
 80004e2:	d102      	bne.n	80004ea <fsm_button_processing+0x3a>
					status = MODE2;
 80004e4:	4b95      	ldr	r3, [pc, #596]	; (800073c <fsm_button_processing+0x28c>)
 80004e6:	2205      	movs	r2, #5
 80004e8:	601a      	str	r2, [r3, #0]
				}
				if (status == AUTO_RED) {
 80004ea:	4b94      	ldr	r3, [pc, #592]	; (800073c <fsm_button_processing+0x28c>)
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	2b06      	cmp	r3, #6
 80004f0:	d102      	bne.n	80004f8 <fsm_button_processing+0x48>
					status = MODE3;
 80004f2:	4b92      	ldr	r3, [pc, #584]	; (800073c <fsm_button_processing+0x28c>)
 80004f4:	2208      	movs	r2, #8
 80004f6:	601a      	str	r2, [r3, #0]
				}
				if (status == AUTO_AMBER) {
 80004f8:	4b90      	ldr	r3, [pc, #576]	; (800073c <fsm_button_processing+0x28c>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	2b09      	cmp	r3, #9
 80004fe:	d102      	bne.n	8000506 <fsm_button_processing+0x56>
					status = MODE4;
 8000500:	4b8e      	ldr	r3, [pc, #568]	; (800073c <fsm_button_processing+0x28c>)
 8000502:	220b      	movs	r2, #11
 8000504:	601a      	str	r2, [r3, #0]
				}
				if (status == AUTO_GREEN) {
 8000506:	4b8d      	ldr	r3, [pc, #564]	; (800073c <fsm_button_processing+0x28c>)
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	2b0c      	cmp	r3, #12
 800050c:	d121      	bne.n	8000552 <fsm_button_processing+0xa2>
					status = MODE1;
 800050e:	4b8b      	ldr	r3, [pc, #556]	; (800073c <fsm_button_processing+0x28c>)
 8000510:	2200      	movs	r2, #0
 8000512:	601a      	str	r2, [r3, #0]
				}
			}
			break;
 8000514:	e01d      	b.n	8000552 <fsm_button_processing+0xa2>
		case BUTTON_PRESSED:
			if (!is_button_pressed(0)) {
 8000516:	2000      	movs	r0, #0
 8000518:	f000 f9a0 	bl	800085c <is_button_pressed>
 800051c:	4603      	mov	r3, r0
 800051e:	2b00      	cmp	r3, #0
 8000520:	d103      	bne.n	800052a <fsm_button_processing+0x7a>
				button_1_state = BUTTON_RELEASED;
 8000522:	4b85      	ldr	r3, [pc, #532]	; (8000738 <fsm_button_processing+0x288>)
 8000524:	2200      	movs	r2, #0
 8000526:	701a      	strb	r2, [r3, #0]
			} else {
				if (is_button_pressed_1s(0)) {
					button_1_state = BUTTON_PRESSED_MORE_THAN_1_SECOND;
				}
			}
			break;
 8000528:	e015      	b.n	8000556 <fsm_button_processing+0xa6>
				if (is_button_pressed_1s(0)) {
 800052a:	2000      	movs	r0, #0
 800052c:	f000 f9b0 	bl	8000890 <is_button_pressed_1s>
 8000530:	4603      	mov	r3, r0
 8000532:	2b00      	cmp	r3, #0
 8000534:	d00f      	beq.n	8000556 <fsm_button_processing+0xa6>
					button_1_state = BUTTON_PRESSED_MORE_THAN_1_SECOND;
 8000536:	4b80      	ldr	r3, [pc, #512]	; (8000738 <fsm_button_processing+0x288>)
 8000538:	2202      	movs	r2, #2
 800053a:	701a      	strb	r2, [r3, #0]
			break;
 800053c:	e00b      	b.n	8000556 <fsm_button_processing+0xa6>
		case BUTTON_PRESSED_MORE_THAN_1_SECOND:
			if (!is_button_pressed(0)) {
 800053e:	2000      	movs	r0, #0
 8000540:	f000 f98c 	bl	800085c <is_button_pressed>
 8000544:	4603      	mov	r3, r0
 8000546:	2b00      	cmp	r3, #0
 8000548:	d107      	bne.n	800055a <fsm_button_processing+0xaa>
				button_1_state = BUTTON_RELEASED;
 800054a:	4b7b      	ldr	r3, [pc, #492]	; (8000738 <fsm_button_processing+0x288>)
 800054c:	2200      	movs	r2, #0
 800054e:	701a      	strb	r2, [r3, #0]
			}
			// do nothing, wait for the button to be released
			break;
 8000550:	e003      	b.n	800055a <fsm_button_processing+0xaa>
			break;
 8000552:	bf00      	nop
 8000554:	e002      	b.n	800055c <fsm_button_processing+0xac>
			break;
 8000556:	bf00      	nop
 8000558:	e000      	b.n	800055c <fsm_button_processing+0xac>
			break;
 800055a:	bf00      	nop
	}

	switch (button_2_state) {
 800055c:	4b78      	ldr	r3, [pc, #480]	; (8000740 <fsm_button_processing+0x290>)
 800055e:	781b      	ldrb	r3, [r3, #0]
 8000560:	2b02      	cmp	r3, #2
 8000562:	d06b      	beq.n	800063c <fsm_button_processing+0x18c>
 8000564:	2b02      	cmp	r3, #2
 8000566:	dc78      	bgt.n	800065a <fsm_button_processing+0x1aa>
 8000568:	2b00      	cmp	r3, #0
 800056a:	d002      	beq.n	8000572 <fsm_button_processing+0xc2>
 800056c:	2b01      	cmp	r3, #1
 800056e:	d051      	beq.n	8000614 <fsm_button_processing+0x164>
 8000570:	e073      	b.n	800065a <fsm_button_processing+0x1aa>
		case BUTTON_RELEASED:
			if (is_button_pressed(1)) {
 8000572:	2001      	movs	r0, #1
 8000574:	f000 f972 	bl	800085c <is_button_pressed>
 8000578:	4603      	mov	r3, r0
 800057a:	2b00      	cmp	r3, #0
 800057c:	d068      	beq.n	8000650 <fsm_button_processing+0x1a0>
				button_2_state = BUTTON_PRESSED;
 800057e:	4b70      	ldr	r3, [pc, #448]	; (8000740 <fsm_button_processing+0x290>)
 8000580:	2201      	movs	r2, #1
 8000582:	701a      	strb	r2, [r3, #0]
				if (status == AUTO_RED || status == ADJ_RED) {
 8000584:	4b6d      	ldr	r3, [pc, #436]	; (800073c <fsm_button_processing+0x28c>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	2b06      	cmp	r3, #6
 800058a:	d003      	beq.n	8000594 <fsm_button_processing+0xe4>
 800058c:	4b6b      	ldr	r3, [pc, #428]	; (800073c <fsm_button_processing+0x28c>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	2b07      	cmp	r3, #7
 8000592:	d10f      	bne.n	80005b4 <fsm_button_processing+0x104>
					status = ADJ_RED;
 8000594:	4b69      	ldr	r3, [pc, #420]	; (800073c <fsm_button_processing+0x28c>)
 8000596:	2207      	movs	r2, #7
 8000598:	601a      	str	r2, [r3, #0]
					T_RED++;
 800059a:	4b6a      	ldr	r3, [pc, #424]	; (8000744 <fsm_button_processing+0x294>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	3301      	adds	r3, #1
 80005a0:	4a68      	ldr	r2, [pc, #416]	; (8000744 <fsm_button_processing+0x294>)
 80005a2:	6013      	str	r3, [r2, #0]
					if (T_RED >= 99*1000) T_RED = 1;
 80005a4:	4b67      	ldr	r3, [pc, #412]	; (8000744 <fsm_button_processing+0x294>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	4a67      	ldr	r2, [pc, #412]	; (8000748 <fsm_button_processing+0x298>)
 80005aa:	4293      	cmp	r3, r2
 80005ac:	dd02      	ble.n	80005b4 <fsm_button_processing+0x104>
 80005ae:	4b65      	ldr	r3, [pc, #404]	; (8000744 <fsm_button_processing+0x294>)
 80005b0:	2201      	movs	r2, #1
 80005b2:	601a      	str	r2, [r3, #0]
				}
				if (status == AUTO_AMBER || status == ADJ_AMBER) {
 80005b4:	4b61      	ldr	r3, [pc, #388]	; (800073c <fsm_button_processing+0x28c>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	2b09      	cmp	r3, #9
 80005ba:	d003      	beq.n	80005c4 <fsm_button_processing+0x114>
 80005bc:	4b5f      	ldr	r3, [pc, #380]	; (800073c <fsm_button_processing+0x28c>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	2b0a      	cmp	r3, #10
 80005c2:	d10e      	bne.n	80005e2 <fsm_button_processing+0x132>
					status = ADJ_AMBER;
 80005c4:	4b5d      	ldr	r3, [pc, #372]	; (800073c <fsm_button_processing+0x28c>)
 80005c6:	220a      	movs	r2, #10
 80005c8:	601a      	str	r2, [r3, #0]
					T_AMBER++;
 80005ca:	4b60      	ldr	r3, [pc, #384]	; (800074c <fsm_button_processing+0x29c>)
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	3301      	adds	r3, #1
 80005d0:	4a5e      	ldr	r2, [pc, #376]	; (800074c <fsm_button_processing+0x29c>)
 80005d2:	6013      	str	r3, [r2, #0]
					if (T_AMBER >= 5) T_AMBER = 1;
 80005d4:	4b5d      	ldr	r3, [pc, #372]	; (800074c <fsm_button_processing+0x29c>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	2b04      	cmp	r3, #4
 80005da:	dd02      	ble.n	80005e2 <fsm_button_processing+0x132>
 80005dc:	4b5b      	ldr	r3, [pc, #364]	; (800074c <fsm_button_processing+0x29c>)
 80005de:	2201      	movs	r2, #1
 80005e0:	601a      	str	r2, [r3, #0]
				}
				if (status == AUTO_GREEN || status == ADJ_GREEN) {
 80005e2:	4b56      	ldr	r3, [pc, #344]	; (800073c <fsm_button_processing+0x28c>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	2b0c      	cmp	r3, #12
 80005e8:	d003      	beq.n	80005f2 <fsm_button_processing+0x142>
 80005ea:	4b54      	ldr	r3, [pc, #336]	; (800073c <fsm_button_processing+0x28c>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	2b0d      	cmp	r3, #13
 80005f0:	d12e      	bne.n	8000650 <fsm_button_processing+0x1a0>
					status = ADJ_GREEN;
 80005f2:	4b52      	ldr	r3, [pc, #328]	; (800073c <fsm_button_processing+0x28c>)
 80005f4:	220d      	movs	r2, #13
 80005f6:	601a      	str	r2, [r3, #0]
					T_GREEN++;
 80005f8:	4b55      	ldr	r3, [pc, #340]	; (8000750 <fsm_button_processing+0x2a0>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	3301      	adds	r3, #1
 80005fe:	4a54      	ldr	r2, [pc, #336]	; (8000750 <fsm_button_processing+0x2a0>)
 8000600:	6013      	str	r3, [r2, #0]
					if (T_GREEN >= 99*1000) T_GREEN = 1;
 8000602:	4b53      	ldr	r3, [pc, #332]	; (8000750 <fsm_button_processing+0x2a0>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	4a50      	ldr	r2, [pc, #320]	; (8000748 <fsm_button_processing+0x298>)
 8000608:	4293      	cmp	r3, r2
 800060a:	dd21      	ble.n	8000650 <fsm_button_processing+0x1a0>
 800060c:	4b50      	ldr	r3, [pc, #320]	; (8000750 <fsm_button_processing+0x2a0>)
 800060e:	2201      	movs	r2, #1
 8000610:	601a      	str	r2, [r3, #0]
				}
			}
			break;
 8000612:	e01d      	b.n	8000650 <fsm_button_processing+0x1a0>
		case BUTTON_PRESSED:
			if (!is_button_pressed(1)) {
 8000614:	2001      	movs	r0, #1
 8000616:	f000 f921 	bl	800085c <is_button_pressed>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d103      	bne.n	8000628 <fsm_button_processing+0x178>
				button_2_state = BUTTON_RELEASED;
 8000620:	4b47      	ldr	r3, [pc, #284]	; (8000740 <fsm_button_processing+0x290>)
 8000622:	2200      	movs	r2, #0
 8000624:	701a      	strb	r2, [r3, #0]
			} else {
				if (is_button_pressed_1s(1)) {
					button_2_state = BUTTON_PRESSED_MORE_THAN_1_SECOND;
				}
			}
			break;
 8000626:	e015      	b.n	8000654 <fsm_button_processing+0x1a4>
				if (is_button_pressed_1s(1)) {
 8000628:	2001      	movs	r0, #1
 800062a:	f000 f931 	bl	8000890 <is_button_pressed_1s>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d00f      	beq.n	8000654 <fsm_button_processing+0x1a4>
					button_2_state = BUTTON_PRESSED_MORE_THAN_1_SECOND;
 8000634:	4b42      	ldr	r3, [pc, #264]	; (8000740 <fsm_button_processing+0x290>)
 8000636:	2202      	movs	r2, #2
 8000638:	701a      	strb	r2, [r3, #0]
			break;
 800063a:	e00b      	b.n	8000654 <fsm_button_processing+0x1a4>
		case BUTTON_PRESSED_MORE_THAN_1_SECOND:
			if (!is_button_pressed(1)) {
 800063c:	2001      	movs	r0, #1
 800063e:	f000 f90d 	bl	800085c <is_button_pressed>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d107      	bne.n	8000658 <fsm_button_processing+0x1a8>
				button_2_state = BUTTON_RELEASED;
 8000648:	4b3d      	ldr	r3, [pc, #244]	; (8000740 <fsm_button_processing+0x290>)
 800064a:	2200      	movs	r2, #0
 800064c:	701a      	strb	r2, [r3, #0]
			}
			// do nothing, wait for the button to be released
			break;
 800064e:	e003      	b.n	8000658 <fsm_button_processing+0x1a8>
			break;
 8000650:	bf00      	nop
 8000652:	e002      	b.n	800065a <fsm_button_processing+0x1aa>
			break;
 8000654:	bf00      	nop
 8000656:	e000      	b.n	800065a <fsm_button_processing+0x1aa>
			break;
 8000658:	bf00      	nop
	}

	switch (button_3_state) {
 800065a:	4b3e      	ldr	r3, [pc, #248]	; (8000754 <fsm_button_processing+0x2a4>)
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	2b02      	cmp	r3, #2
 8000660:	f000 8084 	beq.w	800076c <fsm_button_processing+0x2bc>
 8000664:	2b02      	cmp	r3, #2
 8000666:	f300 8090 	bgt.w	800078a <fsm_button_processing+0x2da>
 800066a:	2b00      	cmp	r3, #0
 800066c:	d002      	beq.n	8000674 <fsm_button_processing+0x1c4>
 800066e:	2b01      	cmp	r3, #1
 8000670:	d057      	beq.n	8000722 <fsm_button_processing+0x272>
				button_3_state = BUTTON_RELEASED;
			}
			// do nothing, wait for the button to be released
			break;
	}
}
 8000672:	e08a      	b.n	800078a <fsm_button_processing+0x2da>
			if (is_button_pressed(2)) {
 8000674:	2002      	movs	r0, #2
 8000676:	f000 f8f1 	bl	800085c <is_button_pressed>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d07f      	beq.n	8000780 <fsm_button_processing+0x2d0>
				button_3_state = BUTTON_PRESSED;
 8000680:	4b34      	ldr	r3, [pc, #208]	; (8000754 <fsm_button_processing+0x2a4>)
 8000682:	2201      	movs	r2, #1
 8000684:	701a      	strb	r2, [r3, #0]
				if (status == ADJ_RED) {
 8000686:	4b2d      	ldr	r3, [pc, #180]	; (800073c <fsm_button_processing+0x28c>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	2b07      	cmp	r3, #7
 800068c:	d114      	bne.n	80006b8 <fsm_button_processing+0x208>
					status = AUTO_RED;
 800068e:	4b2b      	ldr	r3, [pc, #172]	; (800073c <fsm_button_processing+0x28c>)
 8000690:	2206      	movs	r2, #6
 8000692:	601a      	str	r2, [r3, #0]
					if (T_RED <= T_AMBER) T_RED = T_AMBER + 1;
 8000694:	4b2b      	ldr	r3, [pc, #172]	; (8000744 <fsm_button_processing+0x294>)
 8000696:	681a      	ldr	r2, [r3, #0]
 8000698:	4b2c      	ldr	r3, [pc, #176]	; (800074c <fsm_button_processing+0x29c>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	429a      	cmp	r2, r3
 800069e:	dc04      	bgt.n	80006aa <fsm_button_processing+0x1fa>
 80006a0:	4b2a      	ldr	r3, [pc, #168]	; (800074c <fsm_button_processing+0x29c>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	3301      	adds	r3, #1
 80006a6:	4a27      	ldr	r2, [pc, #156]	; (8000744 <fsm_button_processing+0x294>)
 80006a8:	6013      	str	r3, [r2, #0]
					T_GREEN = T_RED - T_AMBER;
 80006aa:	4b26      	ldr	r3, [pc, #152]	; (8000744 <fsm_button_processing+0x294>)
 80006ac:	681a      	ldr	r2, [r3, #0]
 80006ae:	4b27      	ldr	r3, [pc, #156]	; (800074c <fsm_button_processing+0x29c>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	1ad3      	subs	r3, r2, r3
 80006b4:	4a26      	ldr	r2, [pc, #152]	; (8000750 <fsm_button_processing+0x2a0>)
 80006b6:	6013      	str	r3, [r2, #0]
				if (status == ADJ_AMBER) {
 80006b8:	4b20      	ldr	r3, [pc, #128]	; (800073c <fsm_button_processing+0x28c>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	2b0a      	cmp	r3, #10
 80006be:	d114      	bne.n	80006ea <fsm_button_processing+0x23a>
					status = AUTO_AMBER;
 80006c0:	4b1e      	ldr	r3, [pc, #120]	; (800073c <fsm_button_processing+0x28c>)
 80006c2:	2209      	movs	r2, #9
 80006c4:	601a      	str	r2, [r3, #0]
					if (T_RED <= T_AMBER) T_RED = T_AMBER + 1;
 80006c6:	4b1f      	ldr	r3, [pc, #124]	; (8000744 <fsm_button_processing+0x294>)
 80006c8:	681a      	ldr	r2, [r3, #0]
 80006ca:	4b20      	ldr	r3, [pc, #128]	; (800074c <fsm_button_processing+0x29c>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	429a      	cmp	r2, r3
 80006d0:	dc04      	bgt.n	80006dc <fsm_button_processing+0x22c>
 80006d2:	4b1e      	ldr	r3, [pc, #120]	; (800074c <fsm_button_processing+0x29c>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	3301      	adds	r3, #1
 80006d8:	4a1a      	ldr	r2, [pc, #104]	; (8000744 <fsm_button_processing+0x294>)
 80006da:	6013      	str	r3, [r2, #0]
					T_GREEN = T_RED - T_AMBER;
 80006dc:	4b19      	ldr	r3, [pc, #100]	; (8000744 <fsm_button_processing+0x294>)
 80006de:	681a      	ldr	r2, [r3, #0]
 80006e0:	4b1a      	ldr	r3, [pc, #104]	; (800074c <fsm_button_processing+0x29c>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	1ad3      	subs	r3, r2, r3
 80006e6:	4a1a      	ldr	r2, [pc, #104]	; (8000750 <fsm_button_processing+0x2a0>)
 80006e8:	6013      	str	r3, [r2, #0]
				if (status == ADJ_GREEN) {
 80006ea:	4b14      	ldr	r3, [pc, #80]	; (800073c <fsm_button_processing+0x28c>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	2b0d      	cmp	r3, #13
 80006f0:	d146      	bne.n	8000780 <fsm_button_processing+0x2d0>
					status = AUTO_GREEN;
 80006f2:	4b12      	ldr	r3, [pc, #72]	; (800073c <fsm_button_processing+0x28c>)
 80006f4:	220c      	movs	r2, #12
 80006f6:	601a      	str	r2, [r3, #0]
					if (T_AMBER + T_GREEN >= 99) {
 80006f8:	4b14      	ldr	r3, [pc, #80]	; (800074c <fsm_button_processing+0x29c>)
 80006fa:	681a      	ldr	r2, [r3, #0]
 80006fc:	4b14      	ldr	r3, [pc, #80]	; (8000750 <fsm_button_processing+0x2a0>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	4413      	add	r3, r2
 8000702:	2b62      	cmp	r3, #98	; 0x62
 8000704:	dd05      	ble.n	8000712 <fsm_button_processing+0x262>
						T_AMBER = 4;
 8000706:	4b11      	ldr	r3, [pc, #68]	; (800074c <fsm_button_processing+0x29c>)
 8000708:	2204      	movs	r2, #4
 800070a:	601a      	str	r2, [r3, #0]
						T_GREEN = 95;
 800070c:	4b10      	ldr	r3, [pc, #64]	; (8000750 <fsm_button_processing+0x2a0>)
 800070e:	225f      	movs	r2, #95	; 0x5f
 8000710:	601a      	str	r2, [r3, #0]
					T_RED = T_AMBER + T_GREEN;
 8000712:	4b0e      	ldr	r3, [pc, #56]	; (800074c <fsm_button_processing+0x29c>)
 8000714:	681a      	ldr	r2, [r3, #0]
 8000716:	4b0e      	ldr	r3, [pc, #56]	; (8000750 <fsm_button_processing+0x2a0>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	4413      	add	r3, r2
 800071c:	4a09      	ldr	r2, [pc, #36]	; (8000744 <fsm_button_processing+0x294>)
 800071e:	6013      	str	r3, [r2, #0]
			break;
 8000720:	e02e      	b.n	8000780 <fsm_button_processing+0x2d0>
			if (!is_button_pressed(2)) {
 8000722:	2002      	movs	r0, #2
 8000724:	f000 f89a 	bl	800085c <is_button_pressed>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d114      	bne.n	8000758 <fsm_button_processing+0x2a8>
				button_3_state = BUTTON_RELEASED;
 800072e:	4b09      	ldr	r3, [pc, #36]	; (8000754 <fsm_button_processing+0x2a4>)
 8000730:	2200      	movs	r2, #0
 8000732:	701a      	strb	r2, [r3, #0]
			break;
 8000734:	e026      	b.n	8000784 <fsm_button_processing+0x2d4>
 8000736:	bf00      	nop
 8000738:	20000010 	.word	0x20000010
 800073c:	2000000c 	.word	0x2000000c
 8000740:	20000011 	.word	0x20000011
 8000744:	20000000 	.word	0x20000000
 8000748:	000182b7 	.word	0x000182b7
 800074c:	20000004 	.word	0x20000004
 8000750:	20000008 	.word	0x20000008
 8000754:	20000012 	.word	0x20000012
				if (is_button_pressed_1s(2)) {
 8000758:	2002      	movs	r0, #2
 800075a:	f000 f899 	bl	8000890 <is_button_pressed_1s>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d00f      	beq.n	8000784 <fsm_button_processing+0x2d4>
					button_3_state = BUTTON_PRESSED_MORE_THAN_1_SECOND;
 8000764:	4b0a      	ldr	r3, [pc, #40]	; (8000790 <fsm_button_processing+0x2e0>)
 8000766:	2202      	movs	r2, #2
 8000768:	701a      	strb	r2, [r3, #0]
			break;
 800076a:	e00b      	b.n	8000784 <fsm_button_processing+0x2d4>
			if (!is_button_pressed(2)) {
 800076c:	2002      	movs	r0, #2
 800076e:	f000 f875 	bl	800085c <is_button_pressed>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d107      	bne.n	8000788 <fsm_button_processing+0x2d8>
				button_3_state = BUTTON_RELEASED;
 8000778:	4b05      	ldr	r3, [pc, #20]	; (8000790 <fsm_button_processing+0x2e0>)
 800077a:	2200      	movs	r2, #0
 800077c:	701a      	strb	r2, [r3, #0]
			break;
 800077e:	e003      	b.n	8000788 <fsm_button_processing+0x2d8>
			break;
 8000780:	bf00      	nop
 8000782:	e002      	b.n	800078a <fsm_button_processing+0x2da>
			break;
 8000784:	bf00      	nop
 8000786:	e000      	b.n	800078a <fsm_button_processing+0x2da>
			break;
 8000788:	bf00      	nop
}
 800078a:	bf00      	nop
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	20000012 	.word	0x20000012

08000794 <button_reading>:
// after the button is pressed more than 1 second.
static uint16_t counterForButtonPress1s[N0_OF_BUTTONS];

static uint16_t button_pins[N0_OF_BUTTONS] = {button_1_Pin, button_2_Pin, button_3_Pin};

void button_reading(void) {
 8000794:	b590      	push	{r4, r7, lr}
 8000796:	b083      	sub	sp, #12
 8000798:	af00      	add	r7, sp, #0
	for (char i = 0; i < N0_OF_BUTTONS; i++) {
 800079a:	2300      	movs	r3, #0
 800079c:	71fb      	strb	r3, [r7, #7]
 800079e:	e046      	b.n	800082e <button_reading+0x9a>
		debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 80007a0:	79fa      	ldrb	r2, [r7, #7]
 80007a2:	79fb      	ldrb	r3, [r7, #7]
 80007a4:	4926      	ldr	r1, [pc, #152]	; (8000840 <button_reading+0xac>)
 80007a6:	5c89      	ldrb	r1, [r1, r2]
 80007a8:	4a26      	ldr	r2, [pc, #152]	; (8000844 <button_reading+0xb0>)
 80007aa:	54d1      	strb	r1, [r2, r3]
		debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(GPIOB, button_pins[i]);
 80007ac:	79fb      	ldrb	r3, [r7, #7]
 80007ae:	4a26      	ldr	r2, [pc, #152]	; (8000848 <button_reading+0xb4>)
 80007b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80007b4:	79fc      	ldrb	r4, [r7, #7]
 80007b6:	4619      	mov	r1, r3
 80007b8:	4824      	ldr	r0, [pc, #144]	; (800084c <button_reading+0xb8>)
 80007ba:	f000 ff79 	bl	80016b0 <HAL_GPIO_ReadPin>
 80007be:	4603      	mov	r3, r0
 80007c0:	461a      	mov	r2, r3
 80007c2:	4b1f      	ldr	r3, [pc, #124]	; (8000840 <button_reading+0xac>)
 80007c4:	551a      	strb	r2, [r3, r4]

		if (debounceButtonBuffer1[i] == debounceButtonBuffer2[i])
 80007c6:	79fb      	ldrb	r3, [r7, #7]
 80007c8:	4a1d      	ldr	r2, [pc, #116]	; (8000840 <button_reading+0xac>)
 80007ca:	5cd2      	ldrb	r2, [r2, r3]
 80007cc:	79fb      	ldrb	r3, [r7, #7]
 80007ce:	491d      	ldr	r1, [pc, #116]	; (8000844 <button_reading+0xb0>)
 80007d0:	5ccb      	ldrb	r3, [r1, r3]
 80007d2:	429a      	cmp	r2, r3
 80007d4:	d105      	bne.n	80007e2 <button_reading+0x4e>
			buttonBuffer[i] = debounceButtonBuffer1[i];
 80007d6:	79fa      	ldrb	r2, [r7, #7]
 80007d8:	79fb      	ldrb	r3, [r7, #7]
 80007da:	4919      	ldr	r1, [pc, #100]	; (8000840 <button_reading+0xac>)
 80007dc:	5c89      	ldrb	r1, [r1, r2]
 80007de:	4a1c      	ldr	r2, [pc, #112]	; (8000850 <button_reading+0xbc>)
 80007e0:	54d1      	strb	r1, [r2, r3]

		if (buttonBuffer[i] == BUTTON_IS_PRESSED) {
 80007e2:	79fb      	ldrb	r3, [r7, #7]
 80007e4:	4a1a      	ldr	r2, [pc, #104]	; (8000850 <button_reading+0xbc>)
 80007e6:	5cd3      	ldrb	r3, [r2, r3]
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d114      	bne.n	8000816 <button_reading+0x82>
			//if a button is pressed, we start counting
			if (counterForButtonPress1s[i] < DURATION_FOR_AUTO_INCREASING) {
 80007ec:	79fb      	ldrb	r3, [r7, #7]
 80007ee:	4a19      	ldr	r2, [pc, #100]	; (8000854 <button_reading+0xc0>)
 80007f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80007f4:	2b63      	cmp	r3, #99	; 0x63
 80007f6:	d809      	bhi.n	800080c <button_reading+0x78>
				counterForButtonPress1s[i]++;
 80007f8:	79fb      	ldrb	r3, [r7, #7]
 80007fa:	4a16      	ldr	r2, [pc, #88]	; (8000854 <button_reading+0xc0>)
 80007fc:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000800:	3201      	adds	r2, #1
 8000802:	b291      	uxth	r1, r2
 8000804:	4a13      	ldr	r2, [pc, #76]	; (8000854 <button_reading+0xc0>)
 8000806:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800080a:	e00d      	b.n	8000828 <button_reading+0x94>
			} else {
				//the flag is turned on when 1 second has passed
				//since the button is pressed.
				flagForButtonPress1s[i] = 1;
 800080c:	79fb      	ldrb	r3, [r7, #7]
 800080e:	4a12      	ldr	r2, [pc, #72]	; (8000858 <button_reading+0xc4>)
 8000810:	2101      	movs	r1, #1
 8000812:	54d1      	strb	r1, [r2, r3]
 8000814:	e008      	b.n	8000828 <button_reading+0x94>
			}
		} else {
			counterForButtonPress1s[i] = 0;
 8000816:	79fb      	ldrb	r3, [r7, #7]
 8000818:	4a0e      	ldr	r2, [pc, #56]	; (8000854 <button_reading+0xc0>)
 800081a:	2100      	movs	r1, #0
 800081c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			flagForButtonPress1s[i] = 0;
 8000820:	79fb      	ldrb	r3, [r7, #7]
 8000822:	4a0d      	ldr	r2, [pc, #52]	; (8000858 <button_reading+0xc4>)
 8000824:	2100      	movs	r1, #0
 8000826:	54d1      	strb	r1, [r2, r3]
	for (char i = 0; i < N0_OF_BUTTONS; i++) {
 8000828:	79fb      	ldrb	r3, [r7, #7]
 800082a:	3301      	adds	r3, #1
 800082c:	71fb      	strb	r3, [r7, #7]
 800082e:	79fb      	ldrb	r3, [r7, #7]
 8000830:	2b02      	cmp	r3, #2
 8000832:	d9b5      	bls.n	80007a0 <button_reading+0xc>
		}
	}
}
 8000834:	bf00      	nop
 8000836:	bf00      	nop
 8000838:	370c      	adds	r7, #12
 800083a:	46bd      	mov	sp, r7
 800083c:	bd90      	pop	{r4, r7, pc}
 800083e:	bf00      	nop
 8000840:	2000005c 	.word	0x2000005c
 8000844:	20000060 	.word	0x20000060
 8000848:	20000014 	.word	0x20000014
 800084c:	40010c00 	.word	0x40010c00
 8000850:	20000058 	.word	0x20000058
 8000854:	20000068 	.word	0x20000068
 8000858:	20000064 	.word	0x20000064

0800085c <is_button_pressed>:

unsigned char is_button_pressed(uint8_t index){
 800085c:	b480      	push	{r7}
 800085e:	b083      	sub	sp, #12
 8000860:	af00      	add	r7, sp, #0
 8000862:	4603      	mov	r3, r0
 8000864:	71fb      	strb	r3, [r7, #7]
	if (index >= N0_OF_BUTTONS) return 0;
 8000866:	79fb      	ldrb	r3, [r7, #7]
 8000868:	2b02      	cmp	r3, #2
 800086a:	d901      	bls.n	8000870 <is_button_pressed+0x14>
 800086c:	2300      	movs	r3, #0
 800086e:	e007      	b.n	8000880 <is_button_pressed+0x24>
	return (buttonBuffer[index] == BUTTON_IS_PRESSED);
 8000870:	79fb      	ldrb	r3, [r7, #7]
 8000872:	4a06      	ldr	r2, [pc, #24]	; (800088c <is_button_pressed+0x30>)
 8000874:	5cd3      	ldrb	r3, [r2, r3]
 8000876:	2b00      	cmp	r3, #0
 8000878:	bf0c      	ite	eq
 800087a:	2301      	moveq	r3, #1
 800087c:	2300      	movne	r3, #0
 800087e:	b2db      	uxtb	r3, r3
}
 8000880:	4618      	mov	r0, r3
 8000882:	370c      	adds	r7, #12
 8000884:	46bd      	mov	sp, r7
 8000886:	bc80      	pop	{r7}
 8000888:	4770      	bx	lr
 800088a:	bf00      	nop
 800088c:	20000058 	.word	0x20000058

08000890 <is_button_pressed_1s>:

unsigned char is_button_pressed_1s(unsigned char index){
 8000890:	b480      	push	{r7}
 8000892:	b083      	sub	sp, #12
 8000894:	af00      	add	r7, sp, #0
 8000896:	4603      	mov	r3, r0
 8000898:	71fb      	strb	r3, [r7, #7]
	if (index >= N0_OF_BUTTONS) return 0;
 800089a:	79fb      	ldrb	r3, [r7, #7]
 800089c:	2b02      	cmp	r3, #2
 800089e:	d901      	bls.n	80008a4 <is_button_pressed_1s+0x14>
 80008a0:	2300      	movs	r3, #0
 80008a2:	e007      	b.n	80008b4 <is_button_pressed_1s+0x24>
	return (flagForButtonPress1s[index] == 1);
 80008a4:	79fb      	ldrb	r3, [r7, #7]
 80008a6:	4a06      	ldr	r2, [pc, #24]	; (80008c0 <is_button_pressed_1s+0x30>)
 80008a8:	5cd3      	ldrb	r3, [r2, r3]
 80008aa:	2b01      	cmp	r3, #1
 80008ac:	bf0c      	ite	eq
 80008ae:	2301      	moveq	r3, #1
 80008b0:	2300      	movne	r3, #0
 80008b2:	b2db      	uxtb	r3, r3
}
 80008b4:	4618      	mov	r0, r3
 80008b6:	370c      	adds	r7, #12
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bc80      	pop	{r7}
 80008bc:	4770      	bx	lr
 80008be:	bf00      	nop
 80008c0:	20000064 	.word	0x20000064

080008c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b086      	sub	sp, #24
 80008c8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008ca:	f000 fc07 	bl	80010dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008ce:	f000 f869 	bl	80009a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008d2:	f000 f8ef 	bl	8000ab4 <MX_GPIO_Init>
  MX_TIM2_Init();
 80008d6:	f000 f8a1 	bl	8000a1c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80008da:	482b      	ldr	r0, [pc, #172]	; (8000988 <main+0xc4>)
 80008dc:	f001 fb5c 	bl	8001f98 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  setTimer2(250);
 80008e0:	20fa      	movs	r0, #250	; 0xfa
 80008e2:	f000 fb37 	bl	8000f54 <setTimer2>
  setTimer3(250);
 80008e6:	20fa      	movs	r0, #250	; 0xfa
 80008e8:	f000 fb4e 	bl	8000f88 <setTimer3>
  int index_led_1 = 0;
 80008ec:	2300      	movs	r3, #0
 80008ee:	617b      	str	r3, [r7, #20]
  int index_led_2 = 0;
 80008f0:	2300      	movs	r3, #0
 80008f2:	613b      	str	r3, [r7, #16]
  int red_counter = T_RED/1000;
 80008f4:	4b25      	ldr	r3, [pc, #148]	; (800098c <main+0xc8>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4a25      	ldr	r2, [pc, #148]	; (8000990 <main+0xcc>)
 80008fa:	fb82 1203 	smull	r1, r2, r2, r3
 80008fe:	1192      	asrs	r2, r2, #6
 8000900:	17db      	asrs	r3, r3, #31
 8000902:	1ad3      	subs	r3, r2, r3
 8000904:	60fb      	str	r3, [r7, #12]
  int amber_counter = T_AMBER/1000;
 8000906:	4b23      	ldr	r3, [pc, #140]	; (8000994 <main+0xd0>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	4a21      	ldr	r2, [pc, #132]	; (8000990 <main+0xcc>)
 800090c:	fb82 1203 	smull	r1, r2, r2, r3
 8000910:	1192      	asrs	r2, r2, #6
 8000912:	17db      	asrs	r3, r3, #31
 8000914:	1ad3      	subs	r3, r2, r3
 8000916:	60bb      	str	r3, [r7, #8]
  int green_counter = T_GREEN/1000;
 8000918:	4b1f      	ldr	r3, [pc, #124]	; (8000998 <main+0xd4>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	4a1c      	ldr	r2, [pc, #112]	; (8000990 <main+0xcc>)
 800091e:	fb82 1203 	smull	r1, r2, r2, r3
 8000922:	1192      	asrs	r2, r2, #6
 8000924:	17db      	asrs	r3, r3, #31
 8000926:	1ad3      	subs	r3, r2, r3
 8000928:	607b      	str	r3, [r7, #4]
  while (1)
  {
	  fsm_automatic();
 800092a:	f7ff fc0f 	bl	800014c <fsm_automatic>
	  fsm_red_manual();
 800092e:	f7ff fc81 	bl	8000234 <fsm_red_manual>
	  fsm_amber_manual();
 8000932:	f7ff fcbd 	bl	80002b0 <fsm_amber_manual>
	  fsm_green_manual();
 8000936:	f7ff fcf9 	bl	800032c <fsm_green_manual>
	  fsm_button_processing();
 800093a:	f7ff fdb9 	bl	80004b0 <fsm_button_processing>

	  // 2 7_SEG_LEDs scanning
	  if (timer2_flag == 1) {
 800093e:	4b17      	ldr	r3, [pc, #92]	; (800099c <main+0xd8>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	2b01      	cmp	r3, #1
 8000944:	d10d      	bne.n	8000962 <main+0x9e>
		  update7SEG_1(index_led_1++);
 8000946:	697b      	ldr	r3, [r7, #20]
 8000948:	1c5a      	adds	r2, r3, #1
 800094a:	617a      	str	r2, [r7, #20]
 800094c:	4618      	mov	r0, r3
 800094e:	f000 f9cb 	bl	8000ce8 <update7SEG_1>
		  if (index_led_1 >= 2) index_led_1 = 0;
 8000952:	697b      	ldr	r3, [r7, #20]
 8000954:	2b01      	cmp	r3, #1
 8000956:	dd01      	ble.n	800095c <main+0x98>
 8000958:	2300      	movs	r3, #0
 800095a:	617b      	str	r3, [r7, #20]
		  setTimer2(250);
 800095c:	20fa      	movs	r0, #250	; 0xfa
 800095e:	f000 faf9 	bl	8000f54 <setTimer2>
	  }
	  if (timer3_flag == 1) {
 8000962:	4b0f      	ldr	r3, [pc, #60]	; (80009a0 <main+0xdc>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	2b01      	cmp	r3, #1
 8000968:	d1df      	bne.n	800092a <main+0x66>
		  update7SEG_2(index_led_2++);
 800096a:	693b      	ldr	r3, [r7, #16]
 800096c:	1c5a      	adds	r2, r3, #1
 800096e:	613a      	str	r2, [r7, #16]
 8000970:	4618      	mov	r0, r3
 8000972:	f000 f9f3 	bl	8000d5c <update7SEG_2>
		  if (index_led_2 >= 2) index_led_2 = 0;
 8000976:	693b      	ldr	r3, [r7, #16]
 8000978:	2b01      	cmp	r3, #1
 800097a:	dd01      	ble.n	8000980 <main+0xbc>
 800097c:	2300      	movs	r3, #0
 800097e:	613b      	str	r3, [r7, #16]
		  setTimer3(250);
 8000980:	20fa      	movs	r0, #250	; 0xfa
 8000982:	f000 fb01 	bl	8000f88 <setTimer3>
	  fsm_automatic();
 8000986:	e7d0      	b.n	800092a <main+0x66>
 8000988:	20000098 	.word	0x20000098
 800098c:	20000000 	.word	0x20000000
 8000990:	10624dd3 	.word	0x10624dd3
 8000994:	20000004 	.word	0x20000004
 8000998:	20000008 	.word	0x20000008
 800099c:	2000008c 	.word	0x2000008c
 80009a0:	20000090 	.word	0x20000090

080009a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b090      	sub	sp, #64	; 0x40
 80009a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009aa:	f107 0318 	add.w	r3, r7, #24
 80009ae:	2228      	movs	r2, #40	; 0x28
 80009b0:	2100      	movs	r1, #0
 80009b2:	4618      	mov	r0, r3
 80009b4:	f001 feac 	bl	8002710 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009b8:	1d3b      	adds	r3, r7, #4
 80009ba:	2200      	movs	r2, #0
 80009bc:	601a      	str	r2, [r3, #0]
 80009be:	605a      	str	r2, [r3, #4]
 80009c0:	609a      	str	r2, [r3, #8]
 80009c2:	60da      	str	r2, [r3, #12]
 80009c4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009c6:	2302      	movs	r3, #2
 80009c8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009ca:	2301      	movs	r3, #1
 80009cc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009ce:	2310      	movs	r3, #16
 80009d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80009d2:	2300      	movs	r3, #0
 80009d4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009d6:	f107 0318 	add.w	r3, r7, #24
 80009da:	4618      	mov	r0, r3
 80009dc:	f000 feb0 	bl	8001740 <HAL_RCC_OscConfig>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <SystemClock_Config+0x46>
  {
    Error_Handler();
 80009e6:	f000 f8d3 	bl	8000b90 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009ea:	230f      	movs	r3, #15
 80009ec:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80009ee:	2300      	movs	r3, #0
 80009f0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009f2:	2300      	movs	r3, #0
 80009f4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009f6:	2300      	movs	r3, #0
 80009f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009fa:	2300      	movs	r3, #0
 80009fc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80009fe:	1d3b      	adds	r3, r7, #4
 8000a00:	2100      	movs	r1, #0
 8000a02:	4618      	mov	r0, r3
 8000a04:	f001 f91c 	bl	8001c40 <HAL_RCC_ClockConfig>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000a0e:	f000 f8bf 	bl	8000b90 <Error_Handler>
  }
}
 8000a12:	bf00      	nop
 8000a14:	3740      	adds	r7, #64	; 0x40
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
	...

08000a1c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b086      	sub	sp, #24
 8000a20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a22:	f107 0308 	add.w	r3, r7, #8
 8000a26:	2200      	movs	r2, #0
 8000a28:	601a      	str	r2, [r3, #0]
 8000a2a:	605a      	str	r2, [r3, #4]
 8000a2c:	609a      	str	r2, [r3, #8]
 8000a2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a30:	463b      	mov	r3, r7
 8000a32:	2200      	movs	r2, #0
 8000a34:	601a      	str	r2, [r3, #0]
 8000a36:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a38:	4b1d      	ldr	r3, [pc, #116]	; (8000ab0 <MX_TIM2_Init+0x94>)
 8000a3a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a3e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000a40:	4b1b      	ldr	r3, [pc, #108]	; (8000ab0 <MX_TIM2_Init+0x94>)
 8000a42:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000a46:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a48:	4b19      	ldr	r3, [pc, #100]	; (8000ab0 <MX_TIM2_Init+0x94>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000a4e:	4b18      	ldr	r3, [pc, #96]	; (8000ab0 <MX_TIM2_Init+0x94>)
 8000a50:	2209      	movs	r2, #9
 8000a52:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a54:	4b16      	ldr	r3, [pc, #88]	; (8000ab0 <MX_TIM2_Init+0x94>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a5a:	4b15      	ldr	r3, [pc, #84]	; (8000ab0 <MX_TIM2_Init+0x94>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a60:	4813      	ldr	r0, [pc, #76]	; (8000ab0 <MX_TIM2_Init+0x94>)
 8000a62:	f001 fa49 	bl	8001ef8 <HAL_TIM_Base_Init>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000a6c:	f000 f890 	bl	8000b90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a74:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a76:	f107 0308 	add.w	r3, r7, #8
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	480c      	ldr	r0, [pc, #48]	; (8000ab0 <MX_TIM2_Init+0x94>)
 8000a7e:	f001 fbdf 	bl	8002240 <HAL_TIM_ConfigClockSource>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000a88:	f000 f882 	bl	8000b90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a90:	2300      	movs	r3, #0
 8000a92:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a94:	463b      	mov	r3, r7
 8000a96:	4619      	mov	r1, r3
 8000a98:	4805      	ldr	r0, [pc, #20]	; (8000ab0 <MX_TIM2_Init+0x94>)
 8000a9a:	f001 fdab 	bl	80025f4 <HAL_TIMEx_MasterConfigSynchronization>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000aa4:	f000 f874 	bl	8000b90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000aa8:	bf00      	nop
 8000aaa:	3718      	adds	r7, #24
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	20000098 	.word	0x20000098

08000ab4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b086      	sub	sp, #24
 8000ab8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aba:	f107 0308 	add.w	r3, r7, #8
 8000abe:	2200      	movs	r2, #0
 8000ac0:	601a      	str	r2, [r3, #0]
 8000ac2:	605a      	str	r2, [r3, #4]
 8000ac4:	609a      	str	r2, [r3, #8]
 8000ac6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ac8:	4b28      	ldr	r3, [pc, #160]	; (8000b6c <MX_GPIO_Init+0xb8>)
 8000aca:	699b      	ldr	r3, [r3, #24]
 8000acc:	4a27      	ldr	r2, [pc, #156]	; (8000b6c <MX_GPIO_Init+0xb8>)
 8000ace:	f043 0304 	orr.w	r3, r3, #4
 8000ad2:	6193      	str	r3, [r2, #24]
 8000ad4:	4b25      	ldr	r3, [pc, #148]	; (8000b6c <MX_GPIO_Init+0xb8>)
 8000ad6:	699b      	ldr	r3, [r3, #24]
 8000ad8:	f003 0304 	and.w	r3, r3, #4
 8000adc:	607b      	str	r3, [r7, #4]
 8000ade:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ae0:	4b22      	ldr	r3, [pc, #136]	; (8000b6c <MX_GPIO_Init+0xb8>)
 8000ae2:	699b      	ldr	r3, [r3, #24]
 8000ae4:	4a21      	ldr	r2, [pc, #132]	; (8000b6c <MX_GPIO_Init+0xb8>)
 8000ae6:	f043 0308 	orr.w	r3, r3, #8
 8000aea:	6193      	str	r3, [r2, #24]
 8000aec:	4b1f      	ldr	r3, [pc, #124]	; (8000b6c <MX_GPIO_Init+0xb8>)
 8000aee:	699b      	ldr	r3, [r3, #24]
 8000af0:	f003 0308 	and.w	r3, r3, #8
 8000af4:	603b      	str	r3, [r7, #0]
 8000af6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
 8000af8:	2200      	movs	r2, #0
 8000afa:	f640 71fe 	movw	r1, #4094	; 0xffe
 8000afe:	481c      	ldr	r0, [pc, #112]	; (8000b70 <MX_GPIO_Init+0xbc>)
 8000b00:	f000 fded 	bl	80016de <HAL_GPIO_WritePin>
                          |a_Pin|b_Pin|c_Pin|d_Pin
                          |e_Pin|f_Pin|g_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, red_1_Pin|amber_1_Pin|green_1_Pin|red_2_Pin
 8000b04:	2200      	movs	r2, #0
 8000b06:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
 8000b0a:	481a      	ldr	r0, [pc, #104]	; (8000b74 <MX_GPIO_Init+0xc0>)
 8000b0c:	f000 fde7 	bl	80016de <HAL_GPIO_WritePin>
                          |amber_2_Pin|green_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : EN0_Pin EN1_Pin EN2_Pin EN3_Pin
                           a_Pin b_Pin c_Pin d_Pin
                           e_Pin f_Pin g_Pin */
  GPIO_InitStruct.Pin = EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
 8000b10:	f640 73fe 	movw	r3, #4094	; 0xffe
 8000b14:	60bb      	str	r3, [r7, #8]
                          |a_Pin|b_Pin|c_Pin|d_Pin
                          |e_Pin|f_Pin|g_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b16:	2301      	movs	r3, #1
 8000b18:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b1e:	2302      	movs	r3, #2
 8000b20:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b22:	f107 0308 	add.w	r3, r7, #8
 8000b26:	4619      	mov	r1, r3
 8000b28:	4811      	ldr	r0, [pc, #68]	; (8000b70 <MX_GPIO_Init+0xbc>)
 8000b2a:	f000 fc47 	bl	80013bc <HAL_GPIO_Init>

  /*Configure GPIO pins : button_1_Pin button_2_Pin button_3_Pin */
  GPIO_InitStruct.Pin = button_1_Pin|button_2_Pin|button_3_Pin;
 8000b2e:	2307      	movs	r3, #7
 8000b30:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b32:	2300      	movs	r3, #0
 8000b34:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b36:	2300      	movs	r3, #0
 8000b38:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b3a:	f107 0308 	add.w	r3, r7, #8
 8000b3e:	4619      	mov	r1, r3
 8000b40:	480c      	ldr	r0, [pc, #48]	; (8000b74 <MX_GPIO_Init+0xc0>)
 8000b42:	f000 fc3b 	bl	80013bc <HAL_GPIO_Init>

  /*Configure GPIO pins : red_1_Pin amber_1_Pin green_1_Pin red_2_Pin
                           amber_2_Pin green_2_Pin */
  GPIO_InitStruct.Pin = red_1_Pin|amber_1_Pin|green_1_Pin|red_2_Pin
 8000b46:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
 8000b4a:	60bb      	str	r3, [r7, #8]
                          |amber_2_Pin|green_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b50:	2300      	movs	r3, #0
 8000b52:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b54:	2302      	movs	r3, #2
 8000b56:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b58:	f107 0308 	add.w	r3, r7, #8
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	4805      	ldr	r0, [pc, #20]	; (8000b74 <MX_GPIO_Init+0xc0>)
 8000b60:	f000 fc2c 	bl	80013bc <HAL_GPIO_Init>

}
 8000b64:	bf00      	nop
 8000b66:	3718      	adds	r7, #24
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	40021000 	.word	0x40021000
 8000b70:	40010800 	.word	0x40010800
 8000b74:	40010c00 	.word	0x40010c00

08000b78 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim2) {
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
	timer_run();
 8000b80:	f000 fa1c 	bl	8000fbc <timer_run>
	button_reading();
 8000b84:	f7ff fe06 	bl	8000794 <button_reading>
}
 8000b88:	bf00      	nop
 8000b8a:	3708      	adds	r7, #8
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}

08000b90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b94:	b672      	cpsid	i
}
 8000b96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b98:	e7fe      	b.n	8000b98 <Error_Handler+0x8>
	...

08000b9c <display7SEG>:

#include "main.h"

int seven_seg_buffer[4] = {9, 9, 9, 9};

void display7SEG(int num) {
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	2b09      	cmp	r3, #9
 8000ba8:	f200 8091 	bhi.w	8000cce <display7SEG+0x132>
 8000bac:	a201      	add	r2, pc, #4	; (adr r2, 8000bb4 <display7SEG+0x18>)
 8000bae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bb2:	bf00      	nop
 8000bb4:	08000bdd 	.word	0x08000bdd
 8000bb8:	08000bf7 	.word	0x08000bf7
 8000bbc:	08000c0f 	.word	0x08000c0f
 8000bc0:	08000c29 	.word	0x08000c29
 8000bc4:	08000c43 	.word	0x08000c43
 8000bc8:	08000c5d 	.word	0x08000c5d
 8000bcc:	08000c77 	.word	0x08000c77
 8000bd0:	08000c8f 	.word	0x08000c8f
 8000bd4:	08000ca7 	.word	0x08000ca7
 8000bd8:	08000cb5 	.word	0x08000cb5
	switch(num) {
		case 0:
			HAL_GPIO_WritePin(GPIOA, a_Pin | b_Pin | c_Pin | d_Pin | e_Pin | f_Pin, GPIO_PIN_RESET);
 8000bdc:	2200      	movs	r2, #0
 8000bde:	f44f 61fc 	mov.w	r1, #2016	; 0x7e0
 8000be2:	4840      	ldr	r0, [pc, #256]	; (8000ce4 <display7SEG+0x148>)
 8000be4:	f000 fd7b 	bl	80016de <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, g_Pin, GPIO_PIN_SET);
 8000be8:	2201      	movs	r2, #1
 8000bea:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000bee:	483d      	ldr	r0, [pc, #244]	; (8000ce4 <display7SEG+0x148>)
 8000bf0:	f000 fd75 	bl	80016de <HAL_GPIO_WritePin>
			break;
 8000bf4:	e072      	b.n	8000cdc <display7SEG+0x140>
		case 1:
			HAL_GPIO_WritePin(GPIOA, b_Pin | c_Pin, GPIO_PIN_RESET);
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	21c0      	movs	r1, #192	; 0xc0
 8000bfa:	483a      	ldr	r0, [pc, #232]	; (8000ce4 <display7SEG+0x148>)
 8000bfc:	f000 fd6f 	bl	80016de <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, a_Pin | d_Pin | e_Pin | f_Pin | g_Pin, GPIO_PIN_SET);
 8000c00:	2201      	movs	r2, #1
 8000c02:	f44f 6172 	mov.w	r1, #3872	; 0xf20
 8000c06:	4837      	ldr	r0, [pc, #220]	; (8000ce4 <display7SEG+0x148>)
 8000c08:	f000 fd69 	bl	80016de <HAL_GPIO_WritePin>
			break;
 8000c0c:	e066      	b.n	8000cdc <display7SEG+0x140>
		case 2:
			HAL_GPIO_WritePin(GPIOA, a_Pin | b_Pin | d_Pin | e_Pin | g_Pin, GPIO_PIN_RESET);
 8000c0e:	2200      	movs	r2, #0
 8000c10:	f44f 6136 	mov.w	r1, #2912	; 0xb60
 8000c14:	4833      	ldr	r0, [pc, #204]	; (8000ce4 <display7SEG+0x148>)
 8000c16:	f000 fd62 	bl	80016de <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, c_Pin | f_Pin, GPIO_PIN_SET);
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	f44f 6190 	mov.w	r1, #1152	; 0x480
 8000c20:	4830      	ldr	r0, [pc, #192]	; (8000ce4 <display7SEG+0x148>)
 8000c22:	f000 fd5c 	bl	80016de <HAL_GPIO_WritePin>
			break;
 8000c26:	e059      	b.n	8000cdc <display7SEG+0x140>
		case 3:
			HAL_GPIO_WritePin(GPIOA, a_Pin | b_Pin | c_Pin | d_Pin | g_Pin, GPIO_PIN_RESET);
 8000c28:	2200      	movs	r2, #0
 8000c2a:	f44f 611e 	mov.w	r1, #2528	; 0x9e0
 8000c2e:	482d      	ldr	r0, [pc, #180]	; (8000ce4 <display7SEG+0x148>)
 8000c30:	f000 fd55 	bl	80016de <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, e_Pin | f_Pin, GPIO_PIN_SET);
 8000c34:	2201      	movs	r2, #1
 8000c36:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8000c3a:	482a      	ldr	r0, [pc, #168]	; (8000ce4 <display7SEG+0x148>)
 8000c3c:	f000 fd4f 	bl	80016de <HAL_GPIO_WritePin>
			break;
 8000c40:	e04c      	b.n	8000cdc <display7SEG+0x140>
		case 4:
			HAL_GPIO_WritePin(GPIOA, b_Pin | c_Pin | f_Pin | g_Pin, GPIO_PIN_RESET);
 8000c42:	2200      	movs	r2, #0
 8000c44:	f44f 614c 	mov.w	r1, #3264	; 0xcc0
 8000c48:	4826      	ldr	r0, [pc, #152]	; (8000ce4 <display7SEG+0x148>)
 8000c4a:	f000 fd48 	bl	80016de <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, a_Pin | d_Pin | e_Pin, GPIO_PIN_SET);
 8000c4e:	2201      	movs	r2, #1
 8000c50:	f44f 7148 	mov.w	r1, #800	; 0x320
 8000c54:	4823      	ldr	r0, [pc, #140]	; (8000ce4 <display7SEG+0x148>)
 8000c56:	f000 fd42 	bl	80016de <HAL_GPIO_WritePin>
			break;
 8000c5a:	e03f      	b.n	8000cdc <display7SEG+0x140>
		case 5:
			HAL_GPIO_WritePin(GPIOA, a_Pin | c_Pin | d_Pin | f_Pin | g_Pin, GPIO_PIN_RESET);
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	f44f 615a 	mov.w	r1, #3488	; 0xda0
 8000c62:	4820      	ldr	r0, [pc, #128]	; (8000ce4 <display7SEG+0x148>)
 8000c64:	f000 fd3b 	bl	80016de <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, b_Pin | e_Pin, GPIO_PIN_SET);
 8000c68:	2201      	movs	r2, #1
 8000c6a:	f44f 7110 	mov.w	r1, #576	; 0x240
 8000c6e:	481d      	ldr	r0, [pc, #116]	; (8000ce4 <display7SEG+0x148>)
 8000c70:	f000 fd35 	bl	80016de <HAL_GPIO_WritePin>
			break;
 8000c74:	e032      	b.n	8000cdc <display7SEG+0x140>
		case 6:
			HAL_GPIO_WritePin(GPIOA, a_Pin | c_Pin | d_Pin | e_Pin | f_Pin | g_Pin, GPIO_PIN_RESET);
 8000c76:	2200      	movs	r2, #0
 8000c78:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 8000c7c:	4819      	ldr	r0, [pc, #100]	; (8000ce4 <display7SEG+0x148>)
 8000c7e:	f000 fd2e 	bl	80016de <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, b_Pin, GPIO_PIN_SET);
 8000c82:	2201      	movs	r2, #1
 8000c84:	2140      	movs	r1, #64	; 0x40
 8000c86:	4817      	ldr	r0, [pc, #92]	; (8000ce4 <display7SEG+0x148>)
 8000c88:	f000 fd29 	bl	80016de <HAL_GPIO_WritePin>
			break;
 8000c8c:	e026      	b.n	8000cdc <display7SEG+0x140>
		case 7:
			HAL_GPIO_WritePin(GPIOA, a_Pin | b_Pin | c_Pin, GPIO_PIN_RESET);
 8000c8e:	2200      	movs	r2, #0
 8000c90:	21e0      	movs	r1, #224	; 0xe0
 8000c92:	4814      	ldr	r0, [pc, #80]	; (8000ce4 <display7SEG+0x148>)
 8000c94:	f000 fd23 	bl	80016de <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, d_Pin | e_Pin | f_Pin | g_Pin, GPIO_PIN_SET);
 8000c98:	2201      	movs	r2, #1
 8000c9a:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 8000c9e:	4811      	ldr	r0, [pc, #68]	; (8000ce4 <display7SEG+0x148>)
 8000ca0:	f000 fd1d 	bl	80016de <HAL_GPIO_WritePin>
			break;
 8000ca4:	e01a      	b.n	8000cdc <display7SEG+0x140>
		case 8:
			HAL_GPIO_WritePin(GPIOA, a_Pin | b_Pin | c_Pin | d_Pin | e_Pin | f_Pin | g_Pin, GPIO_PIN_RESET);
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	f44f 617e 	mov.w	r1, #4064	; 0xfe0
 8000cac:	480d      	ldr	r0, [pc, #52]	; (8000ce4 <display7SEG+0x148>)
 8000cae:	f000 fd16 	bl	80016de <HAL_GPIO_WritePin>
			break;
 8000cb2:	e013      	b.n	8000cdc <display7SEG+0x140>
		case 9:
			HAL_GPIO_WritePin(GPIOA, a_Pin | b_Pin | c_Pin | d_Pin | f_Pin | g_Pin, GPIO_PIN_RESET);
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	f44f 615e 	mov.w	r1, #3552	; 0xde0
 8000cba:	480a      	ldr	r0, [pc, #40]	; (8000ce4 <display7SEG+0x148>)
 8000cbc:	f000 fd0f 	bl	80016de <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, e_Pin, GPIO_PIN_SET);
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cc6:	4807      	ldr	r0, [pc, #28]	; (8000ce4 <display7SEG+0x148>)
 8000cc8:	f000 fd09 	bl	80016de <HAL_GPIO_WritePin>
			break;
 8000ccc:	e006      	b.n	8000cdc <display7SEG+0x140>
		default:
			HAL_GPIO_WritePin(GPIOA, a_Pin | b_Pin | c_Pin | d_Pin | e_Pin | f_Pin | g_Pin, GPIO_PIN_SET);
 8000cce:	2201      	movs	r2, #1
 8000cd0:	f44f 617e 	mov.w	r1, #4064	; 0xfe0
 8000cd4:	4803      	ldr	r0, [pc, #12]	; (8000ce4 <display7SEG+0x148>)
 8000cd6:	f000 fd02 	bl	80016de <HAL_GPIO_WritePin>
	}
}
 8000cda:	bf00      	nop
 8000cdc:	bf00      	nop
 8000cde:	3708      	adds	r7, #8
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	40010800 	.word	0x40010800

08000ce8 <update7SEG_1>:

void update7SEG_1(int index) {
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
	switch(index) {
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d003      	beq.n	8000cfe <update7SEG_1+0x16>
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	2b01      	cmp	r3, #1
 8000cfa:	d010      	beq.n	8000d1e <update7SEG_1+0x36>
 8000cfc:	e01f      	b.n	8000d3e <update7SEG_1+0x56>
		case 0:
			HAL_GPIO_WritePin(GPIOA, EN1_Pin, SET);
 8000cfe:	2201      	movs	r2, #1
 8000d00:	2104      	movs	r1, #4
 8000d02:	4814      	ldr	r0, [pc, #80]	; (8000d54 <update7SEG_1+0x6c>)
 8000d04:	f000 fceb 	bl	80016de <HAL_GPIO_WritePin>
			display7SEG(seven_seg_buffer[0]);
 8000d08:	4b13      	ldr	r3, [pc, #76]	; (8000d58 <update7SEG_1+0x70>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f7ff ff45 	bl	8000b9c <display7SEG>
			HAL_GPIO_WritePin(GPIOA, EN0_Pin, RESET);
 8000d12:	2200      	movs	r2, #0
 8000d14:	2102      	movs	r1, #2
 8000d16:	480f      	ldr	r0, [pc, #60]	; (8000d54 <update7SEG_1+0x6c>)
 8000d18:	f000 fce1 	bl	80016de <HAL_GPIO_WritePin>
			break;
 8000d1c:	e015      	b.n	8000d4a <update7SEG_1+0x62>
		case 1:
			HAL_GPIO_WritePin(GPIOA, EN0_Pin, SET);
 8000d1e:	2201      	movs	r2, #1
 8000d20:	2102      	movs	r1, #2
 8000d22:	480c      	ldr	r0, [pc, #48]	; (8000d54 <update7SEG_1+0x6c>)
 8000d24:	f000 fcdb 	bl	80016de <HAL_GPIO_WritePin>
			display7SEG(seven_seg_buffer[1]);
 8000d28:	4b0b      	ldr	r3, [pc, #44]	; (8000d58 <update7SEG_1+0x70>)
 8000d2a:	685b      	ldr	r3, [r3, #4]
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f7ff ff35 	bl	8000b9c <display7SEG>
			HAL_GPIO_WritePin(GPIOA, EN1_Pin, RESET);
 8000d32:	2200      	movs	r2, #0
 8000d34:	2104      	movs	r1, #4
 8000d36:	4807      	ldr	r0, [pc, #28]	; (8000d54 <update7SEG_1+0x6c>)
 8000d38:	f000 fcd1 	bl	80016de <HAL_GPIO_WritePin>
			break;
 8000d3c:	e005      	b.n	8000d4a <update7SEG_1+0x62>
		default:
			HAL_GPIO_WritePin(GPIOA, EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin, SET);
 8000d3e:	2201      	movs	r2, #1
 8000d40:	211e      	movs	r1, #30
 8000d42:	4804      	ldr	r0, [pc, #16]	; (8000d54 <update7SEG_1+0x6c>)
 8000d44:	f000 fccb 	bl	80016de <HAL_GPIO_WritePin>
			break;
 8000d48:	bf00      	nop
	}
}
 8000d4a:	bf00      	nop
 8000d4c:	3708      	adds	r7, #8
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	40010800 	.word	0x40010800
 8000d58:	2000001c 	.word	0x2000001c

08000d5c <update7SEG_2>:

void update7SEG_2(int index) {
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
	switch(index) {
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d003      	beq.n	8000d72 <update7SEG_2+0x16>
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	2b01      	cmp	r3, #1
 8000d6e:	d010      	beq.n	8000d92 <update7SEG_2+0x36>
 8000d70:	e01f      	b.n	8000db2 <update7SEG_2+0x56>
		case 0:
			HAL_GPIO_WritePin(GPIOA, EN3_Pin, SET);
 8000d72:	2201      	movs	r2, #1
 8000d74:	2110      	movs	r1, #16
 8000d76:	4814      	ldr	r0, [pc, #80]	; (8000dc8 <update7SEG_2+0x6c>)
 8000d78:	f000 fcb1 	bl	80016de <HAL_GPIO_WritePin>
			display7SEG(seven_seg_buffer[2]);
 8000d7c:	4b13      	ldr	r3, [pc, #76]	; (8000dcc <update7SEG_2+0x70>)
 8000d7e:	689b      	ldr	r3, [r3, #8]
 8000d80:	4618      	mov	r0, r3
 8000d82:	f7ff ff0b 	bl	8000b9c <display7SEG>
			HAL_GPIO_WritePin(GPIOA, EN2_Pin, RESET);
 8000d86:	2200      	movs	r2, #0
 8000d88:	2108      	movs	r1, #8
 8000d8a:	480f      	ldr	r0, [pc, #60]	; (8000dc8 <update7SEG_2+0x6c>)
 8000d8c:	f000 fca7 	bl	80016de <HAL_GPIO_WritePin>
			break;
 8000d90:	e015      	b.n	8000dbe <update7SEG_2+0x62>
		case 1:
			HAL_GPIO_WritePin(GPIOA, EN2_Pin, SET);
 8000d92:	2201      	movs	r2, #1
 8000d94:	2108      	movs	r1, #8
 8000d96:	480c      	ldr	r0, [pc, #48]	; (8000dc8 <update7SEG_2+0x6c>)
 8000d98:	f000 fca1 	bl	80016de <HAL_GPIO_WritePin>
			display7SEG(seven_seg_buffer[3]);
 8000d9c:	4b0b      	ldr	r3, [pc, #44]	; (8000dcc <update7SEG_2+0x70>)
 8000d9e:	68db      	ldr	r3, [r3, #12]
 8000da0:	4618      	mov	r0, r3
 8000da2:	f7ff fefb 	bl	8000b9c <display7SEG>
			HAL_GPIO_WritePin(GPIOA, EN3_Pin, RESET);
 8000da6:	2200      	movs	r2, #0
 8000da8:	2110      	movs	r1, #16
 8000daa:	4807      	ldr	r0, [pc, #28]	; (8000dc8 <update7SEG_2+0x6c>)
 8000dac:	f000 fc97 	bl	80016de <HAL_GPIO_WritePin>
			break;
 8000db0:	e005      	b.n	8000dbe <update7SEG_2+0x62>
		default:
			HAL_GPIO_WritePin(GPIOA, EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin, SET);
 8000db2:	2201      	movs	r2, #1
 8000db4:	211e      	movs	r1, #30
 8000db6:	4804      	ldr	r0, [pc, #16]	; (8000dc8 <update7SEG_2+0x6c>)
 8000db8:	f000 fc91 	bl	80016de <HAL_GPIO_WritePin>
			break;
 8000dbc:	bf00      	nop
	}
}
 8000dbe:	bf00      	nop
 8000dc0:	3708      	adds	r7, #8
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	40010800 	.word	0x40010800
 8000dcc:	2000001c 	.word	0x2000001c

08000dd0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b085      	sub	sp, #20
 8000dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000dd6:	4b15      	ldr	r3, [pc, #84]	; (8000e2c <HAL_MspInit+0x5c>)
 8000dd8:	699b      	ldr	r3, [r3, #24]
 8000dda:	4a14      	ldr	r2, [pc, #80]	; (8000e2c <HAL_MspInit+0x5c>)
 8000ddc:	f043 0301 	orr.w	r3, r3, #1
 8000de0:	6193      	str	r3, [r2, #24]
 8000de2:	4b12      	ldr	r3, [pc, #72]	; (8000e2c <HAL_MspInit+0x5c>)
 8000de4:	699b      	ldr	r3, [r3, #24]
 8000de6:	f003 0301 	and.w	r3, r3, #1
 8000dea:	60bb      	str	r3, [r7, #8]
 8000dec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dee:	4b0f      	ldr	r3, [pc, #60]	; (8000e2c <HAL_MspInit+0x5c>)
 8000df0:	69db      	ldr	r3, [r3, #28]
 8000df2:	4a0e      	ldr	r2, [pc, #56]	; (8000e2c <HAL_MspInit+0x5c>)
 8000df4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000df8:	61d3      	str	r3, [r2, #28]
 8000dfa:	4b0c      	ldr	r3, [pc, #48]	; (8000e2c <HAL_MspInit+0x5c>)
 8000dfc:	69db      	ldr	r3, [r3, #28]
 8000dfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e02:	607b      	str	r3, [r7, #4]
 8000e04:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000e06:	4b0a      	ldr	r3, [pc, #40]	; (8000e30 <HAL_MspInit+0x60>)
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	60fb      	str	r3, [r7, #12]
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000e12:	60fb      	str	r3, [r7, #12]
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000e1a:	60fb      	str	r3, [r7, #12]
 8000e1c:	4a04      	ldr	r2, [pc, #16]	; (8000e30 <HAL_MspInit+0x60>)
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e22:	bf00      	nop
 8000e24:	3714      	adds	r7, #20
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bc80      	pop	{r7}
 8000e2a:	4770      	bx	lr
 8000e2c:	40021000 	.word	0x40021000
 8000e30:	40010000 	.word	0x40010000

08000e34 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b084      	sub	sp, #16
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e44:	d113      	bne.n	8000e6e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e46:	4b0c      	ldr	r3, [pc, #48]	; (8000e78 <HAL_TIM_Base_MspInit+0x44>)
 8000e48:	69db      	ldr	r3, [r3, #28]
 8000e4a:	4a0b      	ldr	r2, [pc, #44]	; (8000e78 <HAL_TIM_Base_MspInit+0x44>)
 8000e4c:	f043 0301 	orr.w	r3, r3, #1
 8000e50:	61d3      	str	r3, [r2, #28]
 8000e52:	4b09      	ldr	r3, [pc, #36]	; (8000e78 <HAL_TIM_Base_MspInit+0x44>)
 8000e54:	69db      	ldr	r3, [r3, #28]
 8000e56:	f003 0301 	and.w	r3, r3, #1
 8000e5a:	60fb      	str	r3, [r7, #12]
 8000e5c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000e5e:	2200      	movs	r2, #0
 8000e60:	2100      	movs	r1, #0
 8000e62:	201c      	movs	r0, #28
 8000e64:	f000 fa73 	bl	800134e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000e68:	201c      	movs	r0, #28
 8000e6a:	f000 fa8c 	bl	8001386 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000e6e:	bf00      	nop
 8000e70:	3710      	adds	r7, #16
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	40021000 	.word	0x40021000

08000e7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e80:	e7fe      	b.n	8000e80 <NMI_Handler+0x4>

08000e82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e82:	b480      	push	{r7}
 8000e84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e86:	e7fe      	b.n	8000e86 <HardFault_Handler+0x4>

08000e88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e8c:	e7fe      	b.n	8000e8c <MemManage_Handler+0x4>

08000e8e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e8e:	b480      	push	{r7}
 8000e90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e92:	e7fe      	b.n	8000e92 <BusFault_Handler+0x4>

08000e94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e98:	e7fe      	b.n	8000e98 <UsageFault_Handler+0x4>

08000e9a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e9a:	b480      	push	{r7}
 8000e9c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e9e:	bf00      	nop
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bc80      	pop	{r7}
 8000ea4:	4770      	bx	lr

08000ea6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ea6:	b480      	push	{r7}
 8000ea8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eaa:	bf00      	nop
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bc80      	pop	{r7}
 8000eb0:	4770      	bx	lr

08000eb2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eb2:	b480      	push	{r7}
 8000eb4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eb6:	bf00      	nop
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bc80      	pop	{r7}
 8000ebc:	4770      	bx	lr

08000ebe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ebe:	b580      	push	{r7, lr}
 8000ec0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ec2:	f000 f951 	bl	8001168 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ec6:	bf00      	nop
 8000ec8:	bd80      	pop	{r7, pc}
	...

08000ecc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000ed0:	4802      	ldr	r0, [pc, #8]	; (8000edc <TIM2_IRQHandler+0x10>)
 8000ed2:	f001 f8ad 	bl	8002030 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000ed6:	bf00      	nop
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	20000098 	.word	0x20000098

08000ee0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ee4:	bf00      	nop
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bc80      	pop	{r7}
 8000eea:	4770      	bx	lr

08000eec <setTimer0>:

int TIMER_CYCLE = 10;
int timer0_counter = 0, timer1_counter = 0, timer2_counter = 0, timer3_counter = 0, timer4_counter = 0;
int timer0_flag = 0, timer1_flag = 0, timer2_flag = 0, timer3_flag = 0, timer4_flag = 0;;

void setTimer0(int duration) {
 8000eec:	b480      	push	{r7}
 8000eee:	b083      	sub	sp, #12
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
	timer0_counter = duration/TIMER_CYCLE;
 8000ef4:	4b07      	ldr	r3, [pc, #28]	; (8000f14 <setTimer0+0x28>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	687a      	ldr	r2, [r7, #4]
 8000efa:	fb92 f3f3 	sdiv	r3, r2, r3
 8000efe:	4a06      	ldr	r2, [pc, #24]	; (8000f18 <setTimer0+0x2c>)
 8000f00:	6013      	str	r3, [r2, #0]
	timer0_flag = 0;
 8000f02:	4b06      	ldr	r3, [pc, #24]	; (8000f1c <setTimer0+0x30>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	601a      	str	r2, [r3, #0]
}
 8000f08:	bf00      	nop
 8000f0a:	370c      	adds	r7, #12
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bc80      	pop	{r7}
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	20000030 	.word	0x20000030
 8000f18:	20000070 	.word	0x20000070
 8000f1c:	20000084 	.word	0x20000084

08000f20 <setTimer1>:

void setTimer1(int duration) {
 8000f20:	b480      	push	{r7}
 8000f22:	b083      	sub	sp, #12
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
	timer1_counter = duration/TIMER_CYCLE;
 8000f28:	4b07      	ldr	r3, [pc, #28]	; (8000f48 <setTimer1+0x28>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	687a      	ldr	r2, [r7, #4]
 8000f2e:	fb92 f3f3 	sdiv	r3, r2, r3
 8000f32:	4a06      	ldr	r2, [pc, #24]	; (8000f4c <setTimer1+0x2c>)
 8000f34:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 8000f36:	4b06      	ldr	r3, [pc, #24]	; (8000f50 <setTimer1+0x30>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	601a      	str	r2, [r3, #0]
}
 8000f3c:	bf00      	nop
 8000f3e:	370c      	adds	r7, #12
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bc80      	pop	{r7}
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	20000030 	.word	0x20000030
 8000f4c:	20000074 	.word	0x20000074
 8000f50:	20000088 	.word	0x20000088

08000f54 <setTimer2>:

void setTimer2(int duration) {
 8000f54:	b480      	push	{r7}
 8000f56:	b083      	sub	sp, #12
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
	timer2_counter = duration/TIMER_CYCLE;
 8000f5c:	4b07      	ldr	r3, [pc, #28]	; (8000f7c <setTimer2+0x28>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	687a      	ldr	r2, [r7, #4]
 8000f62:	fb92 f3f3 	sdiv	r3, r2, r3
 8000f66:	4a06      	ldr	r2, [pc, #24]	; (8000f80 <setTimer2+0x2c>)
 8000f68:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 8000f6a:	4b06      	ldr	r3, [pc, #24]	; (8000f84 <setTimer2+0x30>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	601a      	str	r2, [r3, #0]
}
 8000f70:	bf00      	nop
 8000f72:	370c      	adds	r7, #12
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bc80      	pop	{r7}
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	20000030 	.word	0x20000030
 8000f80:	20000078 	.word	0x20000078
 8000f84:	2000008c 	.word	0x2000008c

08000f88 <setTimer3>:

void setTimer3(int duration) {
 8000f88:	b480      	push	{r7}
 8000f8a:	b083      	sub	sp, #12
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
	timer3_counter = duration/TIMER_CYCLE;
 8000f90:	4b07      	ldr	r3, [pc, #28]	; (8000fb0 <setTimer3+0x28>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	687a      	ldr	r2, [r7, #4]
 8000f96:	fb92 f3f3 	sdiv	r3, r2, r3
 8000f9a:	4a06      	ldr	r2, [pc, #24]	; (8000fb4 <setTimer3+0x2c>)
 8000f9c:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 8000f9e:	4b06      	ldr	r3, [pc, #24]	; (8000fb8 <setTimer3+0x30>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	601a      	str	r2, [r3, #0]
}
 8000fa4:	bf00      	nop
 8000fa6:	370c      	adds	r7, #12
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bc80      	pop	{r7}
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	20000030 	.word	0x20000030
 8000fb4:	2000007c 	.word	0x2000007c
 8000fb8:	20000090 	.word	0x20000090

08000fbc <timer_run>:
void setTimer4(int duration) {
	timer4_counter = duration/TIMER_CYCLE;
	timer4_flag = 0;
}

void timer_run() {
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
	if (timer0_counter > 0) {
 8000fc0:	4b29      	ldr	r3, [pc, #164]	; (8001068 <timer_run+0xac>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	dd0b      	ble.n	8000fe0 <timer_run+0x24>
		timer0_counter--;
 8000fc8:	4b27      	ldr	r3, [pc, #156]	; (8001068 <timer_run+0xac>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	3b01      	subs	r3, #1
 8000fce:	4a26      	ldr	r2, [pc, #152]	; (8001068 <timer_run+0xac>)
 8000fd0:	6013      	str	r3, [r2, #0]
		if (timer0_counter == 0) timer0_flag = 1;
 8000fd2:	4b25      	ldr	r3, [pc, #148]	; (8001068 <timer_run+0xac>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d102      	bne.n	8000fe0 <timer_run+0x24>
 8000fda:	4b24      	ldr	r3, [pc, #144]	; (800106c <timer_run+0xb0>)
 8000fdc:	2201      	movs	r2, #1
 8000fde:	601a      	str	r2, [r3, #0]
	}
	if (timer1_counter > 0) {
 8000fe0:	4b23      	ldr	r3, [pc, #140]	; (8001070 <timer_run+0xb4>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	dd0b      	ble.n	8001000 <timer_run+0x44>
		timer1_counter--;
 8000fe8:	4b21      	ldr	r3, [pc, #132]	; (8001070 <timer_run+0xb4>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	3b01      	subs	r3, #1
 8000fee:	4a20      	ldr	r2, [pc, #128]	; (8001070 <timer_run+0xb4>)
 8000ff0:	6013      	str	r3, [r2, #0]
		if (timer1_counter == 0) timer1_flag = 1;
 8000ff2:	4b1f      	ldr	r3, [pc, #124]	; (8001070 <timer_run+0xb4>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d102      	bne.n	8001000 <timer_run+0x44>
 8000ffa:	4b1e      	ldr	r3, [pc, #120]	; (8001074 <timer_run+0xb8>)
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	601a      	str	r2, [r3, #0]
	}
	if (timer2_counter > 0) {
 8001000:	4b1d      	ldr	r3, [pc, #116]	; (8001078 <timer_run+0xbc>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	2b00      	cmp	r3, #0
 8001006:	dd0b      	ble.n	8001020 <timer_run+0x64>
		timer2_counter--;
 8001008:	4b1b      	ldr	r3, [pc, #108]	; (8001078 <timer_run+0xbc>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	3b01      	subs	r3, #1
 800100e:	4a1a      	ldr	r2, [pc, #104]	; (8001078 <timer_run+0xbc>)
 8001010:	6013      	str	r3, [r2, #0]
		if (timer2_counter == 0) timer2_flag = 1;
 8001012:	4b19      	ldr	r3, [pc, #100]	; (8001078 <timer_run+0xbc>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d102      	bne.n	8001020 <timer_run+0x64>
 800101a:	4b18      	ldr	r3, [pc, #96]	; (800107c <timer_run+0xc0>)
 800101c:	2201      	movs	r2, #1
 800101e:	601a      	str	r2, [r3, #0]
	}
	if (timer3_counter > 0) {
 8001020:	4b17      	ldr	r3, [pc, #92]	; (8001080 <timer_run+0xc4>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	2b00      	cmp	r3, #0
 8001026:	dd0b      	ble.n	8001040 <timer_run+0x84>
		timer3_counter--;
 8001028:	4b15      	ldr	r3, [pc, #84]	; (8001080 <timer_run+0xc4>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	3b01      	subs	r3, #1
 800102e:	4a14      	ldr	r2, [pc, #80]	; (8001080 <timer_run+0xc4>)
 8001030:	6013      	str	r3, [r2, #0]
		if (timer3_counter == 0) timer3_flag = 1;
 8001032:	4b13      	ldr	r3, [pc, #76]	; (8001080 <timer_run+0xc4>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d102      	bne.n	8001040 <timer_run+0x84>
 800103a:	4b12      	ldr	r3, [pc, #72]	; (8001084 <timer_run+0xc8>)
 800103c:	2201      	movs	r2, #1
 800103e:	601a      	str	r2, [r3, #0]
	}
	if (timer4_counter > 0) {
 8001040:	4b11      	ldr	r3, [pc, #68]	; (8001088 <timer_run+0xcc>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	2b00      	cmp	r3, #0
 8001046:	dd0b      	ble.n	8001060 <timer_run+0xa4>
		timer4_counter--;
 8001048:	4b0f      	ldr	r3, [pc, #60]	; (8001088 <timer_run+0xcc>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	3b01      	subs	r3, #1
 800104e:	4a0e      	ldr	r2, [pc, #56]	; (8001088 <timer_run+0xcc>)
 8001050:	6013      	str	r3, [r2, #0]
		if (timer4_counter == 0) timer4_flag = 1;
 8001052:	4b0d      	ldr	r3, [pc, #52]	; (8001088 <timer_run+0xcc>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d102      	bne.n	8001060 <timer_run+0xa4>
 800105a:	4b0c      	ldr	r3, [pc, #48]	; (800108c <timer_run+0xd0>)
 800105c:	2201      	movs	r2, #1
 800105e:	601a      	str	r2, [r3, #0]
	}
}
 8001060:	bf00      	nop
 8001062:	46bd      	mov	sp, r7
 8001064:	bc80      	pop	{r7}
 8001066:	4770      	bx	lr
 8001068:	20000070 	.word	0x20000070
 800106c:	20000084 	.word	0x20000084
 8001070:	20000074 	.word	0x20000074
 8001074:	20000088 	.word	0x20000088
 8001078:	20000078 	.word	0x20000078
 800107c:	2000008c 	.word	0x2000008c
 8001080:	2000007c 	.word	0x2000007c
 8001084:	20000090 	.word	0x20000090
 8001088:	20000080 	.word	0x20000080
 800108c:	20000094 	.word	0x20000094

08001090 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001090:	f7ff ff26 	bl	8000ee0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001094:	480b      	ldr	r0, [pc, #44]	; (80010c4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001096:	490c      	ldr	r1, [pc, #48]	; (80010c8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001098:	4a0c      	ldr	r2, [pc, #48]	; (80010cc <LoopFillZerobss+0x16>)
  movs r3, #0
 800109a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800109c:	e002      	b.n	80010a4 <LoopCopyDataInit>

0800109e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800109e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010a2:	3304      	adds	r3, #4

080010a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010a8:	d3f9      	bcc.n	800109e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010aa:	4a09      	ldr	r2, [pc, #36]	; (80010d0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80010ac:	4c09      	ldr	r4, [pc, #36]	; (80010d4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010b0:	e001      	b.n	80010b6 <LoopFillZerobss>

080010b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010b4:	3204      	adds	r2, #4

080010b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010b8:	d3fb      	bcc.n	80010b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010ba:	f001 fb05 	bl	80026c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80010be:	f7ff fc01 	bl	80008c4 <main>
  bx lr
 80010c2:	4770      	bx	lr
  ldr r0, =_sdata
 80010c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010c8:	2000003c 	.word	0x2000003c
  ldr r2, =_sidata
 80010cc:	08002764 	.word	0x08002764
  ldr r2, =_sbss
 80010d0:	2000003c 	.word	0x2000003c
  ldr r4, =_ebss
 80010d4:	200000e4 	.word	0x200000e4

080010d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010d8:	e7fe      	b.n	80010d8 <ADC1_2_IRQHandler>
	...

080010dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010e0:	4b08      	ldr	r3, [pc, #32]	; (8001104 <HAL_Init+0x28>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a07      	ldr	r2, [pc, #28]	; (8001104 <HAL_Init+0x28>)
 80010e6:	f043 0310 	orr.w	r3, r3, #16
 80010ea:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010ec:	2003      	movs	r0, #3
 80010ee:	f000 f923 	bl	8001338 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010f2:	200f      	movs	r0, #15
 80010f4:	f000 f808 	bl	8001108 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010f8:	f7ff fe6a 	bl	8000dd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010fc:	2300      	movs	r3, #0
}
 80010fe:	4618      	mov	r0, r3
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	40022000 	.word	0x40022000

08001108 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001110:	4b12      	ldr	r3, [pc, #72]	; (800115c <HAL_InitTick+0x54>)
 8001112:	681a      	ldr	r2, [r3, #0]
 8001114:	4b12      	ldr	r3, [pc, #72]	; (8001160 <HAL_InitTick+0x58>)
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	4619      	mov	r1, r3
 800111a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800111e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001122:	fbb2 f3f3 	udiv	r3, r2, r3
 8001126:	4618      	mov	r0, r3
 8001128:	f000 f93b 	bl	80013a2 <HAL_SYSTICK_Config>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001132:	2301      	movs	r3, #1
 8001134:	e00e      	b.n	8001154 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2b0f      	cmp	r3, #15
 800113a:	d80a      	bhi.n	8001152 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800113c:	2200      	movs	r2, #0
 800113e:	6879      	ldr	r1, [r7, #4]
 8001140:	f04f 30ff 	mov.w	r0, #4294967295
 8001144:	f000 f903 	bl	800134e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001148:	4a06      	ldr	r2, [pc, #24]	; (8001164 <HAL_InitTick+0x5c>)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800114e:	2300      	movs	r3, #0
 8001150:	e000      	b.n	8001154 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001152:	2301      	movs	r3, #1
}
 8001154:	4618      	mov	r0, r3
 8001156:	3708      	adds	r7, #8
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	2000002c 	.word	0x2000002c
 8001160:	20000038 	.word	0x20000038
 8001164:	20000034 	.word	0x20000034

08001168 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800116c:	4b05      	ldr	r3, [pc, #20]	; (8001184 <HAL_IncTick+0x1c>)
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	461a      	mov	r2, r3
 8001172:	4b05      	ldr	r3, [pc, #20]	; (8001188 <HAL_IncTick+0x20>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4413      	add	r3, r2
 8001178:	4a03      	ldr	r2, [pc, #12]	; (8001188 <HAL_IncTick+0x20>)
 800117a:	6013      	str	r3, [r2, #0]
}
 800117c:	bf00      	nop
 800117e:	46bd      	mov	sp, r7
 8001180:	bc80      	pop	{r7}
 8001182:	4770      	bx	lr
 8001184:	20000038 	.word	0x20000038
 8001188:	200000e0 	.word	0x200000e0

0800118c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  return uwTick;
 8001190:	4b02      	ldr	r3, [pc, #8]	; (800119c <HAL_GetTick+0x10>)
 8001192:	681b      	ldr	r3, [r3, #0]
}
 8001194:	4618      	mov	r0, r3
 8001196:	46bd      	mov	sp, r7
 8001198:	bc80      	pop	{r7}
 800119a:	4770      	bx	lr
 800119c:	200000e0 	.word	0x200000e0

080011a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b085      	sub	sp, #20
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	f003 0307 	and.w	r3, r3, #7
 80011ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011b0:	4b0c      	ldr	r3, [pc, #48]	; (80011e4 <__NVIC_SetPriorityGrouping+0x44>)
 80011b2:	68db      	ldr	r3, [r3, #12]
 80011b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011b6:	68ba      	ldr	r2, [r7, #8]
 80011b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011bc:	4013      	ands	r3, r2
 80011be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011d2:	4a04      	ldr	r2, [pc, #16]	; (80011e4 <__NVIC_SetPriorityGrouping+0x44>)
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	60d3      	str	r3, [r2, #12]
}
 80011d8:	bf00      	nop
 80011da:	3714      	adds	r7, #20
 80011dc:	46bd      	mov	sp, r7
 80011de:	bc80      	pop	{r7}
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	e000ed00 	.word	0xe000ed00

080011e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011ec:	4b04      	ldr	r3, [pc, #16]	; (8001200 <__NVIC_GetPriorityGrouping+0x18>)
 80011ee:	68db      	ldr	r3, [r3, #12]
 80011f0:	0a1b      	lsrs	r3, r3, #8
 80011f2:	f003 0307 	and.w	r3, r3, #7
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bc80      	pop	{r7}
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	e000ed00 	.word	0xe000ed00

08001204 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001204:	b480      	push	{r7}
 8001206:	b083      	sub	sp, #12
 8001208:	af00      	add	r7, sp, #0
 800120a:	4603      	mov	r3, r0
 800120c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800120e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001212:	2b00      	cmp	r3, #0
 8001214:	db0b      	blt.n	800122e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001216:	79fb      	ldrb	r3, [r7, #7]
 8001218:	f003 021f 	and.w	r2, r3, #31
 800121c:	4906      	ldr	r1, [pc, #24]	; (8001238 <__NVIC_EnableIRQ+0x34>)
 800121e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001222:	095b      	lsrs	r3, r3, #5
 8001224:	2001      	movs	r0, #1
 8001226:	fa00 f202 	lsl.w	r2, r0, r2
 800122a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800122e:	bf00      	nop
 8001230:	370c      	adds	r7, #12
 8001232:	46bd      	mov	sp, r7
 8001234:	bc80      	pop	{r7}
 8001236:	4770      	bx	lr
 8001238:	e000e100 	.word	0xe000e100

0800123c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800123c:	b480      	push	{r7}
 800123e:	b083      	sub	sp, #12
 8001240:	af00      	add	r7, sp, #0
 8001242:	4603      	mov	r3, r0
 8001244:	6039      	str	r1, [r7, #0]
 8001246:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001248:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800124c:	2b00      	cmp	r3, #0
 800124e:	db0a      	blt.n	8001266 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	b2da      	uxtb	r2, r3
 8001254:	490c      	ldr	r1, [pc, #48]	; (8001288 <__NVIC_SetPriority+0x4c>)
 8001256:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800125a:	0112      	lsls	r2, r2, #4
 800125c:	b2d2      	uxtb	r2, r2
 800125e:	440b      	add	r3, r1
 8001260:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001264:	e00a      	b.n	800127c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	b2da      	uxtb	r2, r3
 800126a:	4908      	ldr	r1, [pc, #32]	; (800128c <__NVIC_SetPriority+0x50>)
 800126c:	79fb      	ldrb	r3, [r7, #7]
 800126e:	f003 030f 	and.w	r3, r3, #15
 8001272:	3b04      	subs	r3, #4
 8001274:	0112      	lsls	r2, r2, #4
 8001276:	b2d2      	uxtb	r2, r2
 8001278:	440b      	add	r3, r1
 800127a:	761a      	strb	r2, [r3, #24]
}
 800127c:	bf00      	nop
 800127e:	370c      	adds	r7, #12
 8001280:	46bd      	mov	sp, r7
 8001282:	bc80      	pop	{r7}
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	e000e100 	.word	0xe000e100
 800128c:	e000ed00 	.word	0xe000ed00

08001290 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001290:	b480      	push	{r7}
 8001292:	b089      	sub	sp, #36	; 0x24
 8001294:	af00      	add	r7, sp, #0
 8001296:	60f8      	str	r0, [r7, #12]
 8001298:	60b9      	str	r1, [r7, #8]
 800129a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	f003 0307 	and.w	r3, r3, #7
 80012a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012a4:	69fb      	ldr	r3, [r7, #28]
 80012a6:	f1c3 0307 	rsb	r3, r3, #7
 80012aa:	2b04      	cmp	r3, #4
 80012ac:	bf28      	it	cs
 80012ae:	2304      	movcs	r3, #4
 80012b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	3304      	adds	r3, #4
 80012b6:	2b06      	cmp	r3, #6
 80012b8:	d902      	bls.n	80012c0 <NVIC_EncodePriority+0x30>
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	3b03      	subs	r3, #3
 80012be:	e000      	b.n	80012c2 <NVIC_EncodePriority+0x32>
 80012c0:	2300      	movs	r3, #0
 80012c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012c4:	f04f 32ff 	mov.w	r2, #4294967295
 80012c8:	69bb      	ldr	r3, [r7, #24]
 80012ca:	fa02 f303 	lsl.w	r3, r2, r3
 80012ce:	43da      	mvns	r2, r3
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	401a      	ands	r2, r3
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012d8:	f04f 31ff 	mov.w	r1, #4294967295
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	fa01 f303 	lsl.w	r3, r1, r3
 80012e2:	43d9      	mvns	r1, r3
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012e8:	4313      	orrs	r3, r2
         );
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	3724      	adds	r7, #36	; 0x24
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bc80      	pop	{r7}
 80012f2:	4770      	bx	lr

080012f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	3b01      	subs	r3, #1
 8001300:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001304:	d301      	bcc.n	800130a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001306:	2301      	movs	r3, #1
 8001308:	e00f      	b.n	800132a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800130a:	4a0a      	ldr	r2, [pc, #40]	; (8001334 <SysTick_Config+0x40>)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	3b01      	subs	r3, #1
 8001310:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001312:	210f      	movs	r1, #15
 8001314:	f04f 30ff 	mov.w	r0, #4294967295
 8001318:	f7ff ff90 	bl	800123c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800131c:	4b05      	ldr	r3, [pc, #20]	; (8001334 <SysTick_Config+0x40>)
 800131e:	2200      	movs	r2, #0
 8001320:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001322:	4b04      	ldr	r3, [pc, #16]	; (8001334 <SysTick_Config+0x40>)
 8001324:	2207      	movs	r2, #7
 8001326:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001328:	2300      	movs	r3, #0
}
 800132a:	4618      	mov	r0, r3
 800132c:	3708      	adds	r7, #8
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	e000e010 	.word	0xe000e010

08001338 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001340:	6878      	ldr	r0, [r7, #4]
 8001342:	f7ff ff2d 	bl	80011a0 <__NVIC_SetPriorityGrouping>
}
 8001346:	bf00      	nop
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}

0800134e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800134e:	b580      	push	{r7, lr}
 8001350:	b086      	sub	sp, #24
 8001352:	af00      	add	r7, sp, #0
 8001354:	4603      	mov	r3, r0
 8001356:	60b9      	str	r1, [r7, #8]
 8001358:	607a      	str	r2, [r7, #4]
 800135a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800135c:	2300      	movs	r3, #0
 800135e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001360:	f7ff ff42 	bl	80011e8 <__NVIC_GetPriorityGrouping>
 8001364:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001366:	687a      	ldr	r2, [r7, #4]
 8001368:	68b9      	ldr	r1, [r7, #8]
 800136a:	6978      	ldr	r0, [r7, #20]
 800136c:	f7ff ff90 	bl	8001290 <NVIC_EncodePriority>
 8001370:	4602      	mov	r2, r0
 8001372:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001376:	4611      	mov	r1, r2
 8001378:	4618      	mov	r0, r3
 800137a:	f7ff ff5f 	bl	800123c <__NVIC_SetPriority>
}
 800137e:	bf00      	nop
 8001380:	3718      	adds	r7, #24
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}

08001386 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001386:	b580      	push	{r7, lr}
 8001388:	b082      	sub	sp, #8
 800138a:	af00      	add	r7, sp, #0
 800138c:	4603      	mov	r3, r0
 800138e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001390:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001394:	4618      	mov	r0, r3
 8001396:	f7ff ff35 	bl	8001204 <__NVIC_EnableIRQ>
}
 800139a:	bf00      	nop
 800139c:	3708      	adds	r7, #8
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}

080013a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013a2:	b580      	push	{r7, lr}
 80013a4:	b082      	sub	sp, #8
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013aa:	6878      	ldr	r0, [r7, #4]
 80013ac:	f7ff ffa2 	bl	80012f4 <SysTick_Config>
 80013b0:	4603      	mov	r3, r0
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3708      	adds	r7, #8
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
	...

080013bc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013bc:	b480      	push	{r7}
 80013be:	b08b      	sub	sp, #44	; 0x2c
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
 80013c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013c6:	2300      	movs	r3, #0
 80013c8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80013ca:	2300      	movs	r3, #0
 80013cc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013ce:	e148      	b.n	8001662 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80013d0:	2201      	movs	r2, #1
 80013d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d4:	fa02 f303 	lsl.w	r3, r2, r3
 80013d8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	69fa      	ldr	r2, [r7, #28]
 80013e0:	4013      	ands	r3, r2
 80013e2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80013e4:	69ba      	ldr	r2, [r7, #24]
 80013e6:	69fb      	ldr	r3, [r7, #28]
 80013e8:	429a      	cmp	r2, r3
 80013ea:	f040 8137 	bne.w	800165c <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	4aa3      	ldr	r2, [pc, #652]	; (8001680 <HAL_GPIO_Init+0x2c4>)
 80013f4:	4293      	cmp	r3, r2
 80013f6:	d05e      	beq.n	80014b6 <HAL_GPIO_Init+0xfa>
 80013f8:	4aa1      	ldr	r2, [pc, #644]	; (8001680 <HAL_GPIO_Init+0x2c4>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d875      	bhi.n	80014ea <HAL_GPIO_Init+0x12e>
 80013fe:	4aa1      	ldr	r2, [pc, #644]	; (8001684 <HAL_GPIO_Init+0x2c8>)
 8001400:	4293      	cmp	r3, r2
 8001402:	d058      	beq.n	80014b6 <HAL_GPIO_Init+0xfa>
 8001404:	4a9f      	ldr	r2, [pc, #636]	; (8001684 <HAL_GPIO_Init+0x2c8>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d86f      	bhi.n	80014ea <HAL_GPIO_Init+0x12e>
 800140a:	4a9f      	ldr	r2, [pc, #636]	; (8001688 <HAL_GPIO_Init+0x2cc>)
 800140c:	4293      	cmp	r3, r2
 800140e:	d052      	beq.n	80014b6 <HAL_GPIO_Init+0xfa>
 8001410:	4a9d      	ldr	r2, [pc, #628]	; (8001688 <HAL_GPIO_Init+0x2cc>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d869      	bhi.n	80014ea <HAL_GPIO_Init+0x12e>
 8001416:	4a9d      	ldr	r2, [pc, #628]	; (800168c <HAL_GPIO_Init+0x2d0>)
 8001418:	4293      	cmp	r3, r2
 800141a:	d04c      	beq.n	80014b6 <HAL_GPIO_Init+0xfa>
 800141c:	4a9b      	ldr	r2, [pc, #620]	; (800168c <HAL_GPIO_Init+0x2d0>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d863      	bhi.n	80014ea <HAL_GPIO_Init+0x12e>
 8001422:	4a9b      	ldr	r2, [pc, #620]	; (8001690 <HAL_GPIO_Init+0x2d4>)
 8001424:	4293      	cmp	r3, r2
 8001426:	d046      	beq.n	80014b6 <HAL_GPIO_Init+0xfa>
 8001428:	4a99      	ldr	r2, [pc, #612]	; (8001690 <HAL_GPIO_Init+0x2d4>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d85d      	bhi.n	80014ea <HAL_GPIO_Init+0x12e>
 800142e:	2b12      	cmp	r3, #18
 8001430:	d82a      	bhi.n	8001488 <HAL_GPIO_Init+0xcc>
 8001432:	2b12      	cmp	r3, #18
 8001434:	d859      	bhi.n	80014ea <HAL_GPIO_Init+0x12e>
 8001436:	a201      	add	r2, pc, #4	; (adr r2, 800143c <HAL_GPIO_Init+0x80>)
 8001438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800143c:	080014b7 	.word	0x080014b7
 8001440:	08001491 	.word	0x08001491
 8001444:	080014a3 	.word	0x080014a3
 8001448:	080014e5 	.word	0x080014e5
 800144c:	080014eb 	.word	0x080014eb
 8001450:	080014eb 	.word	0x080014eb
 8001454:	080014eb 	.word	0x080014eb
 8001458:	080014eb 	.word	0x080014eb
 800145c:	080014eb 	.word	0x080014eb
 8001460:	080014eb 	.word	0x080014eb
 8001464:	080014eb 	.word	0x080014eb
 8001468:	080014eb 	.word	0x080014eb
 800146c:	080014eb 	.word	0x080014eb
 8001470:	080014eb 	.word	0x080014eb
 8001474:	080014eb 	.word	0x080014eb
 8001478:	080014eb 	.word	0x080014eb
 800147c:	080014eb 	.word	0x080014eb
 8001480:	08001499 	.word	0x08001499
 8001484:	080014ad 	.word	0x080014ad
 8001488:	4a82      	ldr	r2, [pc, #520]	; (8001694 <HAL_GPIO_Init+0x2d8>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d013      	beq.n	80014b6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800148e:	e02c      	b.n	80014ea <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	68db      	ldr	r3, [r3, #12]
 8001494:	623b      	str	r3, [r7, #32]
          break;
 8001496:	e029      	b.n	80014ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	68db      	ldr	r3, [r3, #12]
 800149c:	3304      	adds	r3, #4
 800149e:	623b      	str	r3, [r7, #32]
          break;
 80014a0:	e024      	b.n	80014ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	68db      	ldr	r3, [r3, #12]
 80014a6:	3308      	adds	r3, #8
 80014a8:	623b      	str	r3, [r7, #32]
          break;
 80014aa:	e01f      	b.n	80014ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	68db      	ldr	r3, [r3, #12]
 80014b0:	330c      	adds	r3, #12
 80014b2:	623b      	str	r3, [r7, #32]
          break;
 80014b4:	e01a      	b.n	80014ec <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	689b      	ldr	r3, [r3, #8]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d102      	bne.n	80014c4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80014be:	2304      	movs	r3, #4
 80014c0:	623b      	str	r3, [r7, #32]
          break;
 80014c2:	e013      	b.n	80014ec <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	689b      	ldr	r3, [r3, #8]
 80014c8:	2b01      	cmp	r3, #1
 80014ca:	d105      	bne.n	80014d8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014cc:	2308      	movs	r3, #8
 80014ce:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	69fa      	ldr	r2, [r7, #28]
 80014d4:	611a      	str	r2, [r3, #16]
          break;
 80014d6:	e009      	b.n	80014ec <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014d8:	2308      	movs	r3, #8
 80014da:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	69fa      	ldr	r2, [r7, #28]
 80014e0:	615a      	str	r2, [r3, #20]
          break;
 80014e2:	e003      	b.n	80014ec <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80014e4:	2300      	movs	r3, #0
 80014e6:	623b      	str	r3, [r7, #32]
          break;
 80014e8:	e000      	b.n	80014ec <HAL_GPIO_Init+0x130>
          break;
 80014ea:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80014ec:	69bb      	ldr	r3, [r7, #24]
 80014ee:	2bff      	cmp	r3, #255	; 0xff
 80014f0:	d801      	bhi.n	80014f6 <HAL_GPIO_Init+0x13a>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	e001      	b.n	80014fa <HAL_GPIO_Init+0x13e>
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	3304      	adds	r3, #4
 80014fa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80014fc:	69bb      	ldr	r3, [r7, #24]
 80014fe:	2bff      	cmp	r3, #255	; 0xff
 8001500:	d802      	bhi.n	8001508 <HAL_GPIO_Init+0x14c>
 8001502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001504:	009b      	lsls	r3, r3, #2
 8001506:	e002      	b.n	800150e <HAL_GPIO_Init+0x152>
 8001508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800150a:	3b08      	subs	r3, #8
 800150c:	009b      	lsls	r3, r3, #2
 800150e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	681a      	ldr	r2, [r3, #0]
 8001514:	210f      	movs	r1, #15
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	fa01 f303 	lsl.w	r3, r1, r3
 800151c:	43db      	mvns	r3, r3
 800151e:	401a      	ands	r2, r3
 8001520:	6a39      	ldr	r1, [r7, #32]
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	fa01 f303 	lsl.w	r3, r1, r3
 8001528:	431a      	orrs	r2, r3
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001536:	2b00      	cmp	r3, #0
 8001538:	f000 8090 	beq.w	800165c <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800153c:	4b56      	ldr	r3, [pc, #344]	; (8001698 <HAL_GPIO_Init+0x2dc>)
 800153e:	699b      	ldr	r3, [r3, #24]
 8001540:	4a55      	ldr	r2, [pc, #340]	; (8001698 <HAL_GPIO_Init+0x2dc>)
 8001542:	f043 0301 	orr.w	r3, r3, #1
 8001546:	6193      	str	r3, [r2, #24]
 8001548:	4b53      	ldr	r3, [pc, #332]	; (8001698 <HAL_GPIO_Init+0x2dc>)
 800154a:	699b      	ldr	r3, [r3, #24]
 800154c:	f003 0301 	and.w	r3, r3, #1
 8001550:	60bb      	str	r3, [r7, #8]
 8001552:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001554:	4a51      	ldr	r2, [pc, #324]	; (800169c <HAL_GPIO_Init+0x2e0>)
 8001556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001558:	089b      	lsrs	r3, r3, #2
 800155a:	3302      	adds	r3, #2
 800155c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001560:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001564:	f003 0303 	and.w	r3, r3, #3
 8001568:	009b      	lsls	r3, r3, #2
 800156a:	220f      	movs	r2, #15
 800156c:	fa02 f303 	lsl.w	r3, r2, r3
 8001570:	43db      	mvns	r3, r3
 8001572:	68fa      	ldr	r2, [r7, #12]
 8001574:	4013      	ands	r3, r2
 8001576:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	4a49      	ldr	r2, [pc, #292]	; (80016a0 <HAL_GPIO_Init+0x2e4>)
 800157c:	4293      	cmp	r3, r2
 800157e:	d00d      	beq.n	800159c <HAL_GPIO_Init+0x1e0>
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	4a48      	ldr	r2, [pc, #288]	; (80016a4 <HAL_GPIO_Init+0x2e8>)
 8001584:	4293      	cmp	r3, r2
 8001586:	d007      	beq.n	8001598 <HAL_GPIO_Init+0x1dc>
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	4a47      	ldr	r2, [pc, #284]	; (80016a8 <HAL_GPIO_Init+0x2ec>)
 800158c:	4293      	cmp	r3, r2
 800158e:	d101      	bne.n	8001594 <HAL_GPIO_Init+0x1d8>
 8001590:	2302      	movs	r3, #2
 8001592:	e004      	b.n	800159e <HAL_GPIO_Init+0x1e2>
 8001594:	2303      	movs	r3, #3
 8001596:	e002      	b.n	800159e <HAL_GPIO_Init+0x1e2>
 8001598:	2301      	movs	r3, #1
 800159a:	e000      	b.n	800159e <HAL_GPIO_Init+0x1e2>
 800159c:	2300      	movs	r3, #0
 800159e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015a0:	f002 0203 	and.w	r2, r2, #3
 80015a4:	0092      	lsls	r2, r2, #2
 80015a6:	4093      	lsls	r3, r2
 80015a8:	68fa      	ldr	r2, [r7, #12]
 80015aa:	4313      	orrs	r3, r2
 80015ac:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80015ae:	493b      	ldr	r1, [pc, #236]	; (800169c <HAL_GPIO_Init+0x2e0>)
 80015b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b2:	089b      	lsrs	r3, r3, #2
 80015b4:	3302      	adds	r3, #2
 80015b6:	68fa      	ldr	r2, [r7, #12]
 80015b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d006      	beq.n	80015d6 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80015c8:	4b38      	ldr	r3, [pc, #224]	; (80016ac <HAL_GPIO_Init+0x2f0>)
 80015ca:	689a      	ldr	r2, [r3, #8]
 80015cc:	4937      	ldr	r1, [pc, #220]	; (80016ac <HAL_GPIO_Init+0x2f0>)
 80015ce:	69bb      	ldr	r3, [r7, #24]
 80015d0:	4313      	orrs	r3, r2
 80015d2:	608b      	str	r3, [r1, #8]
 80015d4:	e006      	b.n	80015e4 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80015d6:	4b35      	ldr	r3, [pc, #212]	; (80016ac <HAL_GPIO_Init+0x2f0>)
 80015d8:	689a      	ldr	r2, [r3, #8]
 80015da:	69bb      	ldr	r3, [r7, #24]
 80015dc:	43db      	mvns	r3, r3
 80015de:	4933      	ldr	r1, [pc, #204]	; (80016ac <HAL_GPIO_Init+0x2f0>)
 80015e0:	4013      	ands	r3, r2
 80015e2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d006      	beq.n	80015fe <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80015f0:	4b2e      	ldr	r3, [pc, #184]	; (80016ac <HAL_GPIO_Init+0x2f0>)
 80015f2:	68da      	ldr	r2, [r3, #12]
 80015f4:	492d      	ldr	r1, [pc, #180]	; (80016ac <HAL_GPIO_Init+0x2f0>)
 80015f6:	69bb      	ldr	r3, [r7, #24]
 80015f8:	4313      	orrs	r3, r2
 80015fa:	60cb      	str	r3, [r1, #12]
 80015fc:	e006      	b.n	800160c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80015fe:	4b2b      	ldr	r3, [pc, #172]	; (80016ac <HAL_GPIO_Init+0x2f0>)
 8001600:	68da      	ldr	r2, [r3, #12]
 8001602:	69bb      	ldr	r3, [r7, #24]
 8001604:	43db      	mvns	r3, r3
 8001606:	4929      	ldr	r1, [pc, #164]	; (80016ac <HAL_GPIO_Init+0x2f0>)
 8001608:	4013      	ands	r3, r2
 800160a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001614:	2b00      	cmp	r3, #0
 8001616:	d006      	beq.n	8001626 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001618:	4b24      	ldr	r3, [pc, #144]	; (80016ac <HAL_GPIO_Init+0x2f0>)
 800161a:	685a      	ldr	r2, [r3, #4]
 800161c:	4923      	ldr	r1, [pc, #140]	; (80016ac <HAL_GPIO_Init+0x2f0>)
 800161e:	69bb      	ldr	r3, [r7, #24]
 8001620:	4313      	orrs	r3, r2
 8001622:	604b      	str	r3, [r1, #4]
 8001624:	e006      	b.n	8001634 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001626:	4b21      	ldr	r3, [pc, #132]	; (80016ac <HAL_GPIO_Init+0x2f0>)
 8001628:	685a      	ldr	r2, [r3, #4]
 800162a:	69bb      	ldr	r3, [r7, #24]
 800162c:	43db      	mvns	r3, r3
 800162e:	491f      	ldr	r1, [pc, #124]	; (80016ac <HAL_GPIO_Init+0x2f0>)
 8001630:	4013      	ands	r3, r2
 8001632:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800163c:	2b00      	cmp	r3, #0
 800163e:	d006      	beq.n	800164e <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001640:	4b1a      	ldr	r3, [pc, #104]	; (80016ac <HAL_GPIO_Init+0x2f0>)
 8001642:	681a      	ldr	r2, [r3, #0]
 8001644:	4919      	ldr	r1, [pc, #100]	; (80016ac <HAL_GPIO_Init+0x2f0>)
 8001646:	69bb      	ldr	r3, [r7, #24]
 8001648:	4313      	orrs	r3, r2
 800164a:	600b      	str	r3, [r1, #0]
 800164c:	e006      	b.n	800165c <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800164e:	4b17      	ldr	r3, [pc, #92]	; (80016ac <HAL_GPIO_Init+0x2f0>)
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	69bb      	ldr	r3, [r7, #24]
 8001654:	43db      	mvns	r3, r3
 8001656:	4915      	ldr	r1, [pc, #84]	; (80016ac <HAL_GPIO_Init+0x2f0>)
 8001658:	4013      	ands	r3, r2
 800165a:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800165c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800165e:	3301      	adds	r3, #1
 8001660:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	681a      	ldr	r2, [r3, #0]
 8001666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001668:	fa22 f303 	lsr.w	r3, r2, r3
 800166c:	2b00      	cmp	r3, #0
 800166e:	f47f aeaf 	bne.w	80013d0 <HAL_GPIO_Init+0x14>
  }
}
 8001672:	bf00      	nop
 8001674:	bf00      	nop
 8001676:	372c      	adds	r7, #44	; 0x2c
 8001678:	46bd      	mov	sp, r7
 800167a:	bc80      	pop	{r7}
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	10320000 	.word	0x10320000
 8001684:	10310000 	.word	0x10310000
 8001688:	10220000 	.word	0x10220000
 800168c:	10210000 	.word	0x10210000
 8001690:	10120000 	.word	0x10120000
 8001694:	10110000 	.word	0x10110000
 8001698:	40021000 	.word	0x40021000
 800169c:	40010000 	.word	0x40010000
 80016a0:	40010800 	.word	0x40010800
 80016a4:	40010c00 	.word	0x40010c00
 80016a8:	40011000 	.word	0x40011000
 80016ac:	40010400 	.word	0x40010400

080016b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b085      	sub	sp, #20
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
 80016b8:	460b      	mov	r3, r1
 80016ba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	689a      	ldr	r2, [r3, #8]
 80016c0:	887b      	ldrh	r3, [r7, #2]
 80016c2:	4013      	ands	r3, r2
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d002      	beq.n	80016ce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80016c8:	2301      	movs	r3, #1
 80016ca:	73fb      	strb	r3, [r7, #15]
 80016cc:	e001      	b.n	80016d2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80016ce:	2300      	movs	r3, #0
 80016d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80016d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	3714      	adds	r7, #20
 80016d8:	46bd      	mov	sp, r7
 80016da:	bc80      	pop	{r7}
 80016dc:	4770      	bx	lr

080016de <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016de:	b480      	push	{r7}
 80016e0:	b083      	sub	sp, #12
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	6078      	str	r0, [r7, #4]
 80016e6:	460b      	mov	r3, r1
 80016e8:	807b      	strh	r3, [r7, #2]
 80016ea:	4613      	mov	r3, r2
 80016ec:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80016ee:	787b      	ldrb	r3, [r7, #1]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d003      	beq.n	80016fc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016f4:	887a      	ldrh	r2, [r7, #2]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80016fa:	e003      	b.n	8001704 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80016fc:	887b      	ldrh	r3, [r7, #2]
 80016fe:	041a      	lsls	r2, r3, #16
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	611a      	str	r2, [r3, #16]
}
 8001704:	bf00      	nop
 8001706:	370c      	adds	r7, #12
 8001708:	46bd      	mov	sp, r7
 800170a:	bc80      	pop	{r7}
 800170c:	4770      	bx	lr

0800170e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800170e:	b480      	push	{r7}
 8001710:	b085      	sub	sp, #20
 8001712:	af00      	add	r7, sp, #0
 8001714:	6078      	str	r0, [r7, #4]
 8001716:	460b      	mov	r3, r1
 8001718:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	68db      	ldr	r3, [r3, #12]
 800171e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001720:	887a      	ldrh	r2, [r7, #2]
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	4013      	ands	r3, r2
 8001726:	041a      	lsls	r2, r3, #16
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	43d9      	mvns	r1, r3
 800172c:	887b      	ldrh	r3, [r7, #2]
 800172e:	400b      	ands	r3, r1
 8001730:	431a      	orrs	r2, r3
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	611a      	str	r2, [r3, #16]
}
 8001736:	bf00      	nop
 8001738:	3714      	adds	r7, #20
 800173a:	46bd      	mov	sp, r7
 800173c:	bc80      	pop	{r7}
 800173e:	4770      	bx	lr

08001740 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b086      	sub	sp, #24
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d101      	bne.n	8001752 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	e26c      	b.n	8001c2c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f003 0301 	and.w	r3, r3, #1
 800175a:	2b00      	cmp	r3, #0
 800175c:	f000 8087 	beq.w	800186e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001760:	4b92      	ldr	r3, [pc, #584]	; (80019ac <HAL_RCC_OscConfig+0x26c>)
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	f003 030c 	and.w	r3, r3, #12
 8001768:	2b04      	cmp	r3, #4
 800176a:	d00c      	beq.n	8001786 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800176c:	4b8f      	ldr	r3, [pc, #572]	; (80019ac <HAL_RCC_OscConfig+0x26c>)
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	f003 030c 	and.w	r3, r3, #12
 8001774:	2b08      	cmp	r3, #8
 8001776:	d112      	bne.n	800179e <HAL_RCC_OscConfig+0x5e>
 8001778:	4b8c      	ldr	r3, [pc, #560]	; (80019ac <HAL_RCC_OscConfig+0x26c>)
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001780:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001784:	d10b      	bne.n	800179e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001786:	4b89      	ldr	r3, [pc, #548]	; (80019ac <HAL_RCC_OscConfig+0x26c>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800178e:	2b00      	cmp	r3, #0
 8001790:	d06c      	beq.n	800186c <HAL_RCC_OscConfig+0x12c>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d168      	bne.n	800186c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
 800179c:	e246      	b.n	8001c2c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017a6:	d106      	bne.n	80017b6 <HAL_RCC_OscConfig+0x76>
 80017a8:	4b80      	ldr	r3, [pc, #512]	; (80019ac <HAL_RCC_OscConfig+0x26c>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a7f      	ldr	r2, [pc, #508]	; (80019ac <HAL_RCC_OscConfig+0x26c>)
 80017ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017b2:	6013      	str	r3, [r2, #0]
 80017b4:	e02e      	b.n	8001814 <HAL_RCC_OscConfig+0xd4>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d10c      	bne.n	80017d8 <HAL_RCC_OscConfig+0x98>
 80017be:	4b7b      	ldr	r3, [pc, #492]	; (80019ac <HAL_RCC_OscConfig+0x26c>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a7a      	ldr	r2, [pc, #488]	; (80019ac <HAL_RCC_OscConfig+0x26c>)
 80017c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017c8:	6013      	str	r3, [r2, #0]
 80017ca:	4b78      	ldr	r3, [pc, #480]	; (80019ac <HAL_RCC_OscConfig+0x26c>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a77      	ldr	r2, [pc, #476]	; (80019ac <HAL_RCC_OscConfig+0x26c>)
 80017d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017d4:	6013      	str	r3, [r2, #0]
 80017d6:	e01d      	b.n	8001814 <HAL_RCC_OscConfig+0xd4>
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017e0:	d10c      	bne.n	80017fc <HAL_RCC_OscConfig+0xbc>
 80017e2:	4b72      	ldr	r3, [pc, #456]	; (80019ac <HAL_RCC_OscConfig+0x26c>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a71      	ldr	r2, [pc, #452]	; (80019ac <HAL_RCC_OscConfig+0x26c>)
 80017e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017ec:	6013      	str	r3, [r2, #0]
 80017ee:	4b6f      	ldr	r3, [pc, #444]	; (80019ac <HAL_RCC_OscConfig+0x26c>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a6e      	ldr	r2, [pc, #440]	; (80019ac <HAL_RCC_OscConfig+0x26c>)
 80017f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017f8:	6013      	str	r3, [r2, #0]
 80017fa:	e00b      	b.n	8001814 <HAL_RCC_OscConfig+0xd4>
 80017fc:	4b6b      	ldr	r3, [pc, #428]	; (80019ac <HAL_RCC_OscConfig+0x26c>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a6a      	ldr	r2, [pc, #424]	; (80019ac <HAL_RCC_OscConfig+0x26c>)
 8001802:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001806:	6013      	str	r3, [r2, #0]
 8001808:	4b68      	ldr	r3, [pc, #416]	; (80019ac <HAL_RCC_OscConfig+0x26c>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a67      	ldr	r2, [pc, #412]	; (80019ac <HAL_RCC_OscConfig+0x26c>)
 800180e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001812:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d013      	beq.n	8001844 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800181c:	f7ff fcb6 	bl	800118c <HAL_GetTick>
 8001820:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001822:	e008      	b.n	8001836 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001824:	f7ff fcb2 	bl	800118c <HAL_GetTick>
 8001828:	4602      	mov	r2, r0
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	2b64      	cmp	r3, #100	; 0x64
 8001830:	d901      	bls.n	8001836 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001832:	2303      	movs	r3, #3
 8001834:	e1fa      	b.n	8001c2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001836:	4b5d      	ldr	r3, [pc, #372]	; (80019ac <HAL_RCC_OscConfig+0x26c>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800183e:	2b00      	cmp	r3, #0
 8001840:	d0f0      	beq.n	8001824 <HAL_RCC_OscConfig+0xe4>
 8001842:	e014      	b.n	800186e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001844:	f7ff fca2 	bl	800118c <HAL_GetTick>
 8001848:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800184a:	e008      	b.n	800185e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800184c:	f7ff fc9e 	bl	800118c <HAL_GetTick>
 8001850:	4602      	mov	r2, r0
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	1ad3      	subs	r3, r2, r3
 8001856:	2b64      	cmp	r3, #100	; 0x64
 8001858:	d901      	bls.n	800185e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800185a:	2303      	movs	r3, #3
 800185c:	e1e6      	b.n	8001c2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800185e:	4b53      	ldr	r3, [pc, #332]	; (80019ac <HAL_RCC_OscConfig+0x26c>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001866:	2b00      	cmp	r3, #0
 8001868:	d1f0      	bne.n	800184c <HAL_RCC_OscConfig+0x10c>
 800186a:	e000      	b.n	800186e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800186c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f003 0302 	and.w	r3, r3, #2
 8001876:	2b00      	cmp	r3, #0
 8001878:	d063      	beq.n	8001942 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800187a:	4b4c      	ldr	r3, [pc, #304]	; (80019ac <HAL_RCC_OscConfig+0x26c>)
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	f003 030c 	and.w	r3, r3, #12
 8001882:	2b00      	cmp	r3, #0
 8001884:	d00b      	beq.n	800189e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001886:	4b49      	ldr	r3, [pc, #292]	; (80019ac <HAL_RCC_OscConfig+0x26c>)
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	f003 030c 	and.w	r3, r3, #12
 800188e:	2b08      	cmp	r3, #8
 8001890:	d11c      	bne.n	80018cc <HAL_RCC_OscConfig+0x18c>
 8001892:	4b46      	ldr	r3, [pc, #280]	; (80019ac <HAL_RCC_OscConfig+0x26c>)
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800189a:	2b00      	cmp	r3, #0
 800189c:	d116      	bne.n	80018cc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800189e:	4b43      	ldr	r3, [pc, #268]	; (80019ac <HAL_RCC_OscConfig+0x26c>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f003 0302 	and.w	r3, r3, #2
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d005      	beq.n	80018b6 <HAL_RCC_OscConfig+0x176>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	691b      	ldr	r3, [r3, #16]
 80018ae:	2b01      	cmp	r3, #1
 80018b0:	d001      	beq.n	80018b6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e1ba      	b.n	8001c2c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018b6:	4b3d      	ldr	r3, [pc, #244]	; (80019ac <HAL_RCC_OscConfig+0x26c>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	695b      	ldr	r3, [r3, #20]
 80018c2:	00db      	lsls	r3, r3, #3
 80018c4:	4939      	ldr	r1, [pc, #228]	; (80019ac <HAL_RCC_OscConfig+0x26c>)
 80018c6:	4313      	orrs	r3, r2
 80018c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018ca:	e03a      	b.n	8001942 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	691b      	ldr	r3, [r3, #16]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d020      	beq.n	8001916 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018d4:	4b36      	ldr	r3, [pc, #216]	; (80019b0 <HAL_RCC_OscConfig+0x270>)
 80018d6:	2201      	movs	r2, #1
 80018d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018da:	f7ff fc57 	bl	800118c <HAL_GetTick>
 80018de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018e0:	e008      	b.n	80018f4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018e2:	f7ff fc53 	bl	800118c <HAL_GetTick>
 80018e6:	4602      	mov	r2, r0
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	1ad3      	subs	r3, r2, r3
 80018ec:	2b02      	cmp	r3, #2
 80018ee:	d901      	bls.n	80018f4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80018f0:	2303      	movs	r3, #3
 80018f2:	e19b      	b.n	8001c2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018f4:	4b2d      	ldr	r3, [pc, #180]	; (80019ac <HAL_RCC_OscConfig+0x26c>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f003 0302 	and.w	r3, r3, #2
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d0f0      	beq.n	80018e2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001900:	4b2a      	ldr	r3, [pc, #168]	; (80019ac <HAL_RCC_OscConfig+0x26c>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	695b      	ldr	r3, [r3, #20]
 800190c:	00db      	lsls	r3, r3, #3
 800190e:	4927      	ldr	r1, [pc, #156]	; (80019ac <HAL_RCC_OscConfig+0x26c>)
 8001910:	4313      	orrs	r3, r2
 8001912:	600b      	str	r3, [r1, #0]
 8001914:	e015      	b.n	8001942 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001916:	4b26      	ldr	r3, [pc, #152]	; (80019b0 <HAL_RCC_OscConfig+0x270>)
 8001918:	2200      	movs	r2, #0
 800191a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800191c:	f7ff fc36 	bl	800118c <HAL_GetTick>
 8001920:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001922:	e008      	b.n	8001936 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001924:	f7ff fc32 	bl	800118c <HAL_GetTick>
 8001928:	4602      	mov	r2, r0
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	2b02      	cmp	r3, #2
 8001930:	d901      	bls.n	8001936 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001932:	2303      	movs	r3, #3
 8001934:	e17a      	b.n	8001c2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001936:	4b1d      	ldr	r3, [pc, #116]	; (80019ac <HAL_RCC_OscConfig+0x26c>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f003 0302 	and.w	r3, r3, #2
 800193e:	2b00      	cmp	r3, #0
 8001940:	d1f0      	bne.n	8001924 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f003 0308 	and.w	r3, r3, #8
 800194a:	2b00      	cmp	r3, #0
 800194c:	d03a      	beq.n	80019c4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	699b      	ldr	r3, [r3, #24]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d019      	beq.n	800198a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001956:	4b17      	ldr	r3, [pc, #92]	; (80019b4 <HAL_RCC_OscConfig+0x274>)
 8001958:	2201      	movs	r2, #1
 800195a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800195c:	f7ff fc16 	bl	800118c <HAL_GetTick>
 8001960:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001962:	e008      	b.n	8001976 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001964:	f7ff fc12 	bl	800118c <HAL_GetTick>
 8001968:	4602      	mov	r2, r0
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	1ad3      	subs	r3, r2, r3
 800196e:	2b02      	cmp	r3, #2
 8001970:	d901      	bls.n	8001976 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001972:	2303      	movs	r3, #3
 8001974:	e15a      	b.n	8001c2c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001976:	4b0d      	ldr	r3, [pc, #52]	; (80019ac <HAL_RCC_OscConfig+0x26c>)
 8001978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800197a:	f003 0302 	and.w	r3, r3, #2
 800197e:	2b00      	cmp	r3, #0
 8001980:	d0f0      	beq.n	8001964 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001982:	2001      	movs	r0, #1
 8001984:	f000 fa9a 	bl	8001ebc <RCC_Delay>
 8001988:	e01c      	b.n	80019c4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800198a:	4b0a      	ldr	r3, [pc, #40]	; (80019b4 <HAL_RCC_OscConfig+0x274>)
 800198c:	2200      	movs	r2, #0
 800198e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001990:	f7ff fbfc 	bl	800118c <HAL_GetTick>
 8001994:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001996:	e00f      	b.n	80019b8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001998:	f7ff fbf8 	bl	800118c <HAL_GetTick>
 800199c:	4602      	mov	r2, r0
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	2b02      	cmp	r3, #2
 80019a4:	d908      	bls.n	80019b8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80019a6:	2303      	movs	r3, #3
 80019a8:	e140      	b.n	8001c2c <HAL_RCC_OscConfig+0x4ec>
 80019aa:	bf00      	nop
 80019ac:	40021000 	.word	0x40021000
 80019b0:	42420000 	.word	0x42420000
 80019b4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019b8:	4b9e      	ldr	r3, [pc, #632]	; (8001c34 <HAL_RCC_OscConfig+0x4f4>)
 80019ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019bc:	f003 0302 	and.w	r3, r3, #2
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d1e9      	bne.n	8001998 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f003 0304 	and.w	r3, r3, #4
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	f000 80a6 	beq.w	8001b1e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019d2:	2300      	movs	r3, #0
 80019d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019d6:	4b97      	ldr	r3, [pc, #604]	; (8001c34 <HAL_RCC_OscConfig+0x4f4>)
 80019d8:	69db      	ldr	r3, [r3, #28]
 80019da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d10d      	bne.n	80019fe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019e2:	4b94      	ldr	r3, [pc, #592]	; (8001c34 <HAL_RCC_OscConfig+0x4f4>)
 80019e4:	69db      	ldr	r3, [r3, #28]
 80019e6:	4a93      	ldr	r2, [pc, #588]	; (8001c34 <HAL_RCC_OscConfig+0x4f4>)
 80019e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019ec:	61d3      	str	r3, [r2, #28]
 80019ee:	4b91      	ldr	r3, [pc, #580]	; (8001c34 <HAL_RCC_OscConfig+0x4f4>)
 80019f0:	69db      	ldr	r3, [r3, #28]
 80019f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019f6:	60bb      	str	r3, [r7, #8]
 80019f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019fa:	2301      	movs	r3, #1
 80019fc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019fe:	4b8e      	ldr	r3, [pc, #568]	; (8001c38 <HAL_RCC_OscConfig+0x4f8>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d118      	bne.n	8001a3c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a0a:	4b8b      	ldr	r3, [pc, #556]	; (8001c38 <HAL_RCC_OscConfig+0x4f8>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a8a      	ldr	r2, [pc, #552]	; (8001c38 <HAL_RCC_OscConfig+0x4f8>)
 8001a10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a16:	f7ff fbb9 	bl	800118c <HAL_GetTick>
 8001a1a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a1c:	e008      	b.n	8001a30 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a1e:	f7ff fbb5 	bl	800118c <HAL_GetTick>
 8001a22:	4602      	mov	r2, r0
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	1ad3      	subs	r3, r2, r3
 8001a28:	2b64      	cmp	r3, #100	; 0x64
 8001a2a:	d901      	bls.n	8001a30 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001a2c:	2303      	movs	r3, #3
 8001a2e:	e0fd      	b.n	8001c2c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a30:	4b81      	ldr	r3, [pc, #516]	; (8001c38 <HAL_RCC_OscConfig+0x4f8>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d0f0      	beq.n	8001a1e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	68db      	ldr	r3, [r3, #12]
 8001a40:	2b01      	cmp	r3, #1
 8001a42:	d106      	bne.n	8001a52 <HAL_RCC_OscConfig+0x312>
 8001a44:	4b7b      	ldr	r3, [pc, #492]	; (8001c34 <HAL_RCC_OscConfig+0x4f4>)
 8001a46:	6a1b      	ldr	r3, [r3, #32]
 8001a48:	4a7a      	ldr	r2, [pc, #488]	; (8001c34 <HAL_RCC_OscConfig+0x4f4>)
 8001a4a:	f043 0301 	orr.w	r3, r3, #1
 8001a4e:	6213      	str	r3, [r2, #32]
 8001a50:	e02d      	b.n	8001aae <HAL_RCC_OscConfig+0x36e>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	68db      	ldr	r3, [r3, #12]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d10c      	bne.n	8001a74 <HAL_RCC_OscConfig+0x334>
 8001a5a:	4b76      	ldr	r3, [pc, #472]	; (8001c34 <HAL_RCC_OscConfig+0x4f4>)
 8001a5c:	6a1b      	ldr	r3, [r3, #32]
 8001a5e:	4a75      	ldr	r2, [pc, #468]	; (8001c34 <HAL_RCC_OscConfig+0x4f4>)
 8001a60:	f023 0301 	bic.w	r3, r3, #1
 8001a64:	6213      	str	r3, [r2, #32]
 8001a66:	4b73      	ldr	r3, [pc, #460]	; (8001c34 <HAL_RCC_OscConfig+0x4f4>)
 8001a68:	6a1b      	ldr	r3, [r3, #32]
 8001a6a:	4a72      	ldr	r2, [pc, #456]	; (8001c34 <HAL_RCC_OscConfig+0x4f4>)
 8001a6c:	f023 0304 	bic.w	r3, r3, #4
 8001a70:	6213      	str	r3, [r2, #32]
 8001a72:	e01c      	b.n	8001aae <HAL_RCC_OscConfig+0x36e>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	68db      	ldr	r3, [r3, #12]
 8001a78:	2b05      	cmp	r3, #5
 8001a7a:	d10c      	bne.n	8001a96 <HAL_RCC_OscConfig+0x356>
 8001a7c:	4b6d      	ldr	r3, [pc, #436]	; (8001c34 <HAL_RCC_OscConfig+0x4f4>)
 8001a7e:	6a1b      	ldr	r3, [r3, #32]
 8001a80:	4a6c      	ldr	r2, [pc, #432]	; (8001c34 <HAL_RCC_OscConfig+0x4f4>)
 8001a82:	f043 0304 	orr.w	r3, r3, #4
 8001a86:	6213      	str	r3, [r2, #32]
 8001a88:	4b6a      	ldr	r3, [pc, #424]	; (8001c34 <HAL_RCC_OscConfig+0x4f4>)
 8001a8a:	6a1b      	ldr	r3, [r3, #32]
 8001a8c:	4a69      	ldr	r2, [pc, #420]	; (8001c34 <HAL_RCC_OscConfig+0x4f4>)
 8001a8e:	f043 0301 	orr.w	r3, r3, #1
 8001a92:	6213      	str	r3, [r2, #32]
 8001a94:	e00b      	b.n	8001aae <HAL_RCC_OscConfig+0x36e>
 8001a96:	4b67      	ldr	r3, [pc, #412]	; (8001c34 <HAL_RCC_OscConfig+0x4f4>)
 8001a98:	6a1b      	ldr	r3, [r3, #32]
 8001a9a:	4a66      	ldr	r2, [pc, #408]	; (8001c34 <HAL_RCC_OscConfig+0x4f4>)
 8001a9c:	f023 0301 	bic.w	r3, r3, #1
 8001aa0:	6213      	str	r3, [r2, #32]
 8001aa2:	4b64      	ldr	r3, [pc, #400]	; (8001c34 <HAL_RCC_OscConfig+0x4f4>)
 8001aa4:	6a1b      	ldr	r3, [r3, #32]
 8001aa6:	4a63      	ldr	r2, [pc, #396]	; (8001c34 <HAL_RCC_OscConfig+0x4f4>)
 8001aa8:	f023 0304 	bic.w	r3, r3, #4
 8001aac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	68db      	ldr	r3, [r3, #12]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d015      	beq.n	8001ae2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ab6:	f7ff fb69 	bl	800118c <HAL_GetTick>
 8001aba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001abc:	e00a      	b.n	8001ad4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001abe:	f7ff fb65 	bl	800118c <HAL_GetTick>
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	1ad3      	subs	r3, r2, r3
 8001ac8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d901      	bls.n	8001ad4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001ad0:	2303      	movs	r3, #3
 8001ad2:	e0ab      	b.n	8001c2c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ad4:	4b57      	ldr	r3, [pc, #348]	; (8001c34 <HAL_RCC_OscConfig+0x4f4>)
 8001ad6:	6a1b      	ldr	r3, [r3, #32]
 8001ad8:	f003 0302 	and.w	r3, r3, #2
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d0ee      	beq.n	8001abe <HAL_RCC_OscConfig+0x37e>
 8001ae0:	e014      	b.n	8001b0c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ae2:	f7ff fb53 	bl	800118c <HAL_GetTick>
 8001ae6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ae8:	e00a      	b.n	8001b00 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001aea:	f7ff fb4f 	bl	800118c <HAL_GetTick>
 8001aee:	4602      	mov	r2, r0
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	1ad3      	subs	r3, r2, r3
 8001af4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d901      	bls.n	8001b00 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001afc:	2303      	movs	r3, #3
 8001afe:	e095      	b.n	8001c2c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b00:	4b4c      	ldr	r3, [pc, #304]	; (8001c34 <HAL_RCC_OscConfig+0x4f4>)
 8001b02:	6a1b      	ldr	r3, [r3, #32]
 8001b04:	f003 0302 	and.w	r3, r3, #2
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d1ee      	bne.n	8001aea <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001b0c:	7dfb      	ldrb	r3, [r7, #23]
 8001b0e:	2b01      	cmp	r3, #1
 8001b10:	d105      	bne.n	8001b1e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b12:	4b48      	ldr	r3, [pc, #288]	; (8001c34 <HAL_RCC_OscConfig+0x4f4>)
 8001b14:	69db      	ldr	r3, [r3, #28]
 8001b16:	4a47      	ldr	r2, [pc, #284]	; (8001c34 <HAL_RCC_OscConfig+0x4f4>)
 8001b18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b1c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	69db      	ldr	r3, [r3, #28]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	f000 8081 	beq.w	8001c2a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b28:	4b42      	ldr	r3, [pc, #264]	; (8001c34 <HAL_RCC_OscConfig+0x4f4>)
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	f003 030c 	and.w	r3, r3, #12
 8001b30:	2b08      	cmp	r3, #8
 8001b32:	d061      	beq.n	8001bf8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	69db      	ldr	r3, [r3, #28]
 8001b38:	2b02      	cmp	r3, #2
 8001b3a:	d146      	bne.n	8001bca <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b3c:	4b3f      	ldr	r3, [pc, #252]	; (8001c3c <HAL_RCC_OscConfig+0x4fc>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b42:	f7ff fb23 	bl	800118c <HAL_GetTick>
 8001b46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b48:	e008      	b.n	8001b5c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b4a:	f7ff fb1f 	bl	800118c <HAL_GetTick>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	1ad3      	subs	r3, r2, r3
 8001b54:	2b02      	cmp	r3, #2
 8001b56:	d901      	bls.n	8001b5c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001b58:	2303      	movs	r3, #3
 8001b5a:	e067      	b.n	8001c2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b5c:	4b35      	ldr	r3, [pc, #212]	; (8001c34 <HAL_RCC_OscConfig+0x4f4>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d1f0      	bne.n	8001b4a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6a1b      	ldr	r3, [r3, #32]
 8001b6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b70:	d108      	bne.n	8001b84 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001b72:	4b30      	ldr	r3, [pc, #192]	; (8001c34 <HAL_RCC_OscConfig+0x4f4>)
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	492d      	ldr	r1, [pc, #180]	; (8001c34 <HAL_RCC_OscConfig+0x4f4>)
 8001b80:	4313      	orrs	r3, r2
 8001b82:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b84:	4b2b      	ldr	r3, [pc, #172]	; (8001c34 <HAL_RCC_OscConfig+0x4f4>)
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6a19      	ldr	r1, [r3, #32]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b94:	430b      	orrs	r3, r1
 8001b96:	4927      	ldr	r1, [pc, #156]	; (8001c34 <HAL_RCC_OscConfig+0x4f4>)
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b9c:	4b27      	ldr	r3, [pc, #156]	; (8001c3c <HAL_RCC_OscConfig+0x4fc>)
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ba2:	f7ff faf3 	bl	800118c <HAL_GetTick>
 8001ba6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ba8:	e008      	b.n	8001bbc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001baa:	f7ff faef 	bl	800118c <HAL_GetTick>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	1ad3      	subs	r3, r2, r3
 8001bb4:	2b02      	cmp	r3, #2
 8001bb6:	d901      	bls.n	8001bbc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001bb8:	2303      	movs	r3, #3
 8001bba:	e037      	b.n	8001c2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bbc:	4b1d      	ldr	r3, [pc, #116]	; (8001c34 <HAL_RCC_OscConfig+0x4f4>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d0f0      	beq.n	8001baa <HAL_RCC_OscConfig+0x46a>
 8001bc8:	e02f      	b.n	8001c2a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bca:	4b1c      	ldr	r3, [pc, #112]	; (8001c3c <HAL_RCC_OscConfig+0x4fc>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bd0:	f7ff fadc 	bl	800118c <HAL_GetTick>
 8001bd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bd6:	e008      	b.n	8001bea <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bd8:	f7ff fad8 	bl	800118c <HAL_GetTick>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	2b02      	cmp	r3, #2
 8001be4:	d901      	bls.n	8001bea <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001be6:	2303      	movs	r3, #3
 8001be8:	e020      	b.n	8001c2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bea:	4b12      	ldr	r3, [pc, #72]	; (8001c34 <HAL_RCC_OscConfig+0x4f4>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d1f0      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x498>
 8001bf6:	e018      	b.n	8001c2a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	69db      	ldr	r3, [r3, #28]
 8001bfc:	2b01      	cmp	r3, #1
 8001bfe:	d101      	bne.n	8001c04 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	e013      	b.n	8001c2c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001c04:	4b0b      	ldr	r3, [pc, #44]	; (8001c34 <HAL_RCC_OscConfig+0x4f4>)
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6a1b      	ldr	r3, [r3, #32]
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d106      	bne.n	8001c26 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c22:	429a      	cmp	r2, r3
 8001c24:	d001      	beq.n	8001c2a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	e000      	b.n	8001c2c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001c2a:	2300      	movs	r3, #0
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	3718      	adds	r7, #24
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	40021000 	.word	0x40021000
 8001c38:	40007000 	.word	0x40007000
 8001c3c:	42420060 	.word	0x42420060

08001c40 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b084      	sub	sp, #16
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
 8001c48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d101      	bne.n	8001c54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c50:	2301      	movs	r3, #1
 8001c52:	e0d0      	b.n	8001df6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c54:	4b6a      	ldr	r3, [pc, #424]	; (8001e00 <HAL_RCC_ClockConfig+0x1c0>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f003 0307 	and.w	r3, r3, #7
 8001c5c:	683a      	ldr	r2, [r7, #0]
 8001c5e:	429a      	cmp	r2, r3
 8001c60:	d910      	bls.n	8001c84 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c62:	4b67      	ldr	r3, [pc, #412]	; (8001e00 <HAL_RCC_ClockConfig+0x1c0>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f023 0207 	bic.w	r2, r3, #7
 8001c6a:	4965      	ldr	r1, [pc, #404]	; (8001e00 <HAL_RCC_ClockConfig+0x1c0>)
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c72:	4b63      	ldr	r3, [pc, #396]	; (8001e00 <HAL_RCC_ClockConfig+0x1c0>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 0307 	and.w	r3, r3, #7
 8001c7a:	683a      	ldr	r2, [r7, #0]
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	d001      	beq.n	8001c84 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001c80:	2301      	movs	r3, #1
 8001c82:	e0b8      	b.n	8001df6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f003 0302 	and.w	r3, r3, #2
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d020      	beq.n	8001cd2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f003 0304 	and.w	r3, r3, #4
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d005      	beq.n	8001ca8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c9c:	4b59      	ldr	r3, [pc, #356]	; (8001e04 <HAL_RCC_ClockConfig+0x1c4>)
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	4a58      	ldr	r2, [pc, #352]	; (8001e04 <HAL_RCC_ClockConfig+0x1c4>)
 8001ca2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001ca6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f003 0308 	and.w	r3, r3, #8
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d005      	beq.n	8001cc0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001cb4:	4b53      	ldr	r3, [pc, #332]	; (8001e04 <HAL_RCC_ClockConfig+0x1c4>)
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	4a52      	ldr	r2, [pc, #328]	; (8001e04 <HAL_RCC_ClockConfig+0x1c4>)
 8001cba:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001cbe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cc0:	4b50      	ldr	r3, [pc, #320]	; (8001e04 <HAL_RCC_ClockConfig+0x1c4>)
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	494d      	ldr	r1, [pc, #308]	; (8001e04 <HAL_RCC_ClockConfig+0x1c4>)
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 0301 	and.w	r3, r3, #1
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d040      	beq.n	8001d60 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d107      	bne.n	8001cf6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ce6:	4b47      	ldr	r3, [pc, #284]	; (8001e04 <HAL_RCC_ClockConfig+0x1c4>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d115      	bne.n	8001d1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e07f      	b.n	8001df6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	2b02      	cmp	r3, #2
 8001cfc:	d107      	bne.n	8001d0e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cfe:	4b41      	ldr	r3, [pc, #260]	; (8001e04 <HAL_RCC_ClockConfig+0x1c4>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d109      	bne.n	8001d1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e073      	b.n	8001df6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d0e:	4b3d      	ldr	r3, [pc, #244]	; (8001e04 <HAL_RCC_ClockConfig+0x1c4>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f003 0302 	and.w	r3, r3, #2
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d101      	bne.n	8001d1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e06b      	b.n	8001df6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d1e:	4b39      	ldr	r3, [pc, #228]	; (8001e04 <HAL_RCC_ClockConfig+0x1c4>)
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	f023 0203 	bic.w	r2, r3, #3
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	4936      	ldr	r1, [pc, #216]	; (8001e04 <HAL_RCC_ClockConfig+0x1c4>)
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d30:	f7ff fa2c 	bl	800118c <HAL_GetTick>
 8001d34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d36:	e00a      	b.n	8001d4e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d38:	f7ff fa28 	bl	800118c <HAL_GetTick>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	1ad3      	subs	r3, r2, r3
 8001d42:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d901      	bls.n	8001d4e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	e053      	b.n	8001df6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d4e:	4b2d      	ldr	r3, [pc, #180]	; (8001e04 <HAL_RCC_ClockConfig+0x1c4>)
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	f003 020c 	and.w	r2, r3, #12
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	009b      	lsls	r3, r3, #2
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	d1eb      	bne.n	8001d38 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d60:	4b27      	ldr	r3, [pc, #156]	; (8001e00 <HAL_RCC_ClockConfig+0x1c0>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f003 0307 	and.w	r3, r3, #7
 8001d68:	683a      	ldr	r2, [r7, #0]
 8001d6a:	429a      	cmp	r2, r3
 8001d6c:	d210      	bcs.n	8001d90 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d6e:	4b24      	ldr	r3, [pc, #144]	; (8001e00 <HAL_RCC_ClockConfig+0x1c0>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f023 0207 	bic.w	r2, r3, #7
 8001d76:	4922      	ldr	r1, [pc, #136]	; (8001e00 <HAL_RCC_ClockConfig+0x1c0>)
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d7e:	4b20      	ldr	r3, [pc, #128]	; (8001e00 <HAL_RCC_ClockConfig+0x1c0>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f003 0307 	and.w	r3, r3, #7
 8001d86:	683a      	ldr	r2, [r7, #0]
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d001      	beq.n	8001d90 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e032      	b.n	8001df6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 0304 	and.w	r3, r3, #4
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d008      	beq.n	8001dae <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d9c:	4b19      	ldr	r3, [pc, #100]	; (8001e04 <HAL_RCC_ClockConfig+0x1c4>)
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	4916      	ldr	r1, [pc, #88]	; (8001e04 <HAL_RCC_ClockConfig+0x1c4>)
 8001daa:	4313      	orrs	r3, r2
 8001dac:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 0308 	and.w	r3, r3, #8
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d009      	beq.n	8001dce <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001dba:	4b12      	ldr	r3, [pc, #72]	; (8001e04 <HAL_RCC_ClockConfig+0x1c4>)
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	691b      	ldr	r3, [r3, #16]
 8001dc6:	00db      	lsls	r3, r3, #3
 8001dc8:	490e      	ldr	r1, [pc, #56]	; (8001e04 <HAL_RCC_ClockConfig+0x1c4>)
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001dce:	f000 f821 	bl	8001e14 <HAL_RCC_GetSysClockFreq>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	4b0b      	ldr	r3, [pc, #44]	; (8001e04 <HAL_RCC_ClockConfig+0x1c4>)
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	091b      	lsrs	r3, r3, #4
 8001dda:	f003 030f 	and.w	r3, r3, #15
 8001dde:	490a      	ldr	r1, [pc, #40]	; (8001e08 <HAL_RCC_ClockConfig+0x1c8>)
 8001de0:	5ccb      	ldrb	r3, [r1, r3]
 8001de2:	fa22 f303 	lsr.w	r3, r2, r3
 8001de6:	4a09      	ldr	r2, [pc, #36]	; (8001e0c <HAL_RCC_ClockConfig+0x1cc>)
 8001de8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001dea:	4b09      	ldr	r3, [pc, #36]	; (8001e10 <HAL_RCC_ClockConfig+0x1d0>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4618      	mov	r0, r3
 8001df0:	f7ff f98a 	bl	8001108 <HAL_InitTick>

  return HAL_OK;
 8001df4:	2300      	movs	r3, #0
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3710      	adds	r7, #16
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	40022000 	.word	0x40022000
 8001e04:	40021000 	.word	0x40021000
 8001e08:	08002738 	.word	0x08002738
 8001e0c:	2000002c 	.word	0x2000002c
 8001e10:	20000034 	.word	0x20000034

08001e14 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b087      	sub	sp, #28
 8001e18:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	60fb      	str	r3, [r7, #12]
 8001e1e:	2300      	movs	r3, #0
 8001e20:	60bb      	str	r3, [r7, #8]
 8001e22:	2300      	movs	r3, #0
 8001e24:	617b      	str	r3, [r7, #20]
 8001e26:	2300      	movs	r3, #0
 8001e28:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001e2e:	4b1e      	ldr	r3, [pc, #120]	; (8001ea8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	f003 030c 	and.w	r3, r3, #12
 8001e3a:	2b04      	cmp	r3, #4
 8001e3c:	d002      	beq.n	8001e44 <HAL_RCC_GetSysClockFreq+0x30>
 8001e3e:	2b08      	cmp	r3, #8
 8001e40:	d003      	beq.n	8001e4a <HAL_RCC_GetSysClockFreq+0x36>
 8001e42:	e027      	b.n	8001e94 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e44:	4b19      	ldr	r3, [pc, #100]	; (8001eac <HAL_RCC_GetSysClockFreq+0x98>)
 8001e46:	613b      	str	r3, [r7, #16]
      break;
 8001e48:	e027      	b.n	8001e9a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	0c9b      	lsrs	r3, r3, #18
 8001e4e:	f003 030f 	and.w	r3, r3, #15
 8001e52:	4a17      	ldr	r2, [pc, #92]	; (8001eb0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001e54:	5cd3      	ldrb	r3, [r2, r3]
 8001e56:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d010      	beq.n	8001e84 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001e62:	4b11      	ldr	r3, [pc, #68]	; (8001ea8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	0c5b      	lsrs	r3, r3, #17
 8001e68:	f003 0301 	and.w	r3, r3, #1
 8001e6c:	4a11      	ldr	r2, [pc, #68]	; (8001eb4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001e6e:	5cd3      	ldrb	r3, [r2, r3]
 8001e70:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4a0d      	ldr	r2, [pc, #52]	; (8001eac <HAL_RCC_GetSysClockFreq+0x98>)
 8001e76:	fb02 f203 	mul.w	r2, r2, r3
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e80:	617b      	str	r3, [r7, #20]
 8001e82:	e004      	b.n	8001e8e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	4a0c      	ldr	r2, [pc, #48]	; (8001eb8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001e88:	fb02 f303 	mul.w	r3, r2, r3
 8001e8c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	613b      	str	r3, [r7, #16]
      break;
 8001e92:	e002      	b.n	8001e9a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001e94:	4b05      	ldr	r3, [pc, #20]	; (8001eac <HAL_RCC_GetSysClockFreq+0x98>)
 8001e96:	613b      	str	r3, [r7, #16]
      break;
 8001e98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e9a:	693b      	ldr	r3, [r7, #16]
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	371c      	adds	r7, #28
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bc80      	pop	{r7}
 8001ea4:	4770      	bx	lr
 8001ea6:	bf00      	nop
 8001ea8:	40021000 	.word	0x40021000
 8001eac:	007a1200 	.word	0x007a1200
 8001eb0:	08002748 	.word	0x08002748
 8001eb4:	08002758 	.word	0x08002758
 8001eb8:	003d0900 	.word	0x003d0900

08001ebc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b085      	sub	sp, #20
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001ec4:	4b0a      	ldr	r3, [pc, #40]	; (8001ef0 <RCC_Delay+0x34>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a0a      	ldr	r2, [pc, #40]	; (8001ef4 <RCC_Delay+0x38>)
 8001eca:	fba2 2303 	umull	r2, r3, r2, r3
 8001ece:	0a5b      	lsrs	r3, r3, #9
 8001ed0:	687a      	ldr	r2, [r7, #4]
 8001ed2:	fb02 f303 	mul.w	r3, r2, r3
 8001ed6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001ed8:	bf00      	nop
  }
  while (Delay --);
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	1e5a      	subs	r2, r3, #1
 8001ede:	60fa      	str	r2, [r7, #12]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d1f9      	bne.n	8001ed8 <RCC_Delay+0x1c>
}
 8001ee4:	bf00      	nop
 8001ee6:	bf00      	nop
 8001ee8:	3714      	adds	r7, #20
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bc80      	pop	{r7}
 8001eee:	4770      	bx	lr
 8001ef0:	2000002c 	.word	0x2000002c
 8001ef4:	10624dd3 	.word	0x10624dd3

08001ef8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d101      	bne.n	8001f0a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	e041      	b.n	8001f8e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d106      	bne.n	8001f24 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f7fe ff88 	bl	8000e34 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2202      	movs	r2, #2
 8001f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	3304      	adds	r3, #4
 8001f34:	4619      	mov	r1, r3
 8001f36:	4610      	mov	r0, r2
 8001f38:	f000 fa6e 	bl	8002418 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2201      	movs	r2, #1
 8001f40:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2201      	movs	r2, #1
 8001f48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2201      	movs	r2, #1
 8001f50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2201      	movs	r2, #1
 8001f58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2201      	movs	r2, #1
 8001f60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2201      	movs	r2, #1
 8001f68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2201      	movs	r2, #1
 8001f70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2201      	movs	r2, #1
 8001f78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2201      	movs	r2, #1
 8001f80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2201      	movs	r2, #1
 8001f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001f8c:	2300      	movs	r3, #0
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3708      	adds	r7, #8
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
	...

08001f98 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b085      	sub	sp, #20
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fa6:	b2db      	uxtb	r3, r3
 8001fa8:	2b01      	cmp	r3, #1
 8001faa:	d001      	beq.n	8001fb0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	e035      	b.n	800201c <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2202      	movs	r2, #2
 8001fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	68da      	ldr	r2, [r3, #12]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f042 0201 	orr.w	r2, r2, #1
 8001fc6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a16      	ldr	r2, [pc, #88]	; (8002028 <HAL_TIM_Base_Start_IT+0x90>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d009      	beq.n	8001fe6 <HAL_TIM_Base_Start_IT+0x4e>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fda:	d004      	beq.n	8001fe6 <HAL_TIM_Base_Start_IT+0x4e>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a12      	ldr	r2, [pc, #72]	; (800202c <HAL_TIM_Base_Start_IT+0x94>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d111      	bne.n	800200a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	f003 0307 	and.w	r3, r3, #7
 8001ff0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	2b06      	cmp	r3, #6
 8001ff6:	d010      	beq.n	800201a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f042 0201 	orr.w	r2, r2, #1
 8002006:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002008:	e007      	b.n	800201a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	681a      	ldr	r2, [r3, #0]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f042 0201 	orr.w	r2, r2, #1
 8002018:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800201a:	2300      	movs	r3, #0
}
 800201c:	4618      	mov	r0, r3
 800201e:	3714      	adds	r7, #20
 8002020:	46bd      	mov	sp, r7
 8002022:	bc80      	pop	{r7}
 8002024:	4770      	bx	lr
 8002026:	bf00      	nop
 8002028:	40012c00 	.word	0x40012c00
 800202c:	40000400 	.word	0x40000400

08002030 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b082      	sub	sp, #8
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	691b      	ldr	r3, [r3, #16]
 800203e:	f003 0302 	and.w	r3, r3, #2
 8002042:	2b02      	cmp	r3, #2
 8002044:	d122      	bne.n	800208c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	68db      	ldr	r3, [r3, #12]
 800204c:	f003 0302 	and.w	r3, r3, #2
 8002050:	2b02      	cmp	r3, #2
 8002052:	d11b      	bne.n	800208c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f06f 0202 	mvn.w	r2, #2
 800205c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2201      	movs	r2, #1
 8002062:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	699b      	ldr	r3, [r3, #24]
 800206a:	f003 0303 	and.w	r3, r3, #3
 800206e:	2b00      	cmp	r3, #0
 8002070:	d003      	beq.n	800207a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	f000 f9b4 	bl	80023e0 <HAL_TIM_IC_CaptureCallback>
 8002078:	e005      	b.n	8002086 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800207a:	6878      	ldr	r0, [r7, #4]
 800207c:	f000 f9a7 	bl	80023ce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002080:	6878      	ldr	r0, [r7, #4]
 8002082:	f000 f9b6 	bl	80023f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2200      	movs	r2, #0
 800208a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	691b      	ldr	r3, [r3, #16]
 8002092:	f003 0304 	and.w	r3, r3, #4
 8002096:	2b04      	cmp	r3, #4
 8002098:	d122      	bne.n	80020e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	f003 0304 	and.w	r3, r3, #4
 80020a4:	2b04      	cmp	r3, #4
 80020a6:	d11b      	bne.n	80020e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f06f 0204 	mvn.w	r2, #4
 80020b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2202      	movs	r2, #2
 80020b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	699b      	ldr	r3, [r3, #24]
 80020be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d003      	beq.n	80020ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f000 f98a 	bl	80023e0 <HAL_TIM_IC_CaptureCallback>
 80020cc:	e005      	b.n	80020da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f000 f97d 	bl	80023ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	f000 f98c 	bl	80023f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2200      	movs	r2, #0
 80020de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	691b      	ldr	r3, [r3, #16]
 80020e6:	f003 0308 	and.w	r3, r3, #8
 80020ea:	2b08      	cmp	r3, #8
 80020ec:	d122      	bne.n	8002134 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	f003 0308 	and.w	r3, r3, #8
 80020f8:	2b08      	cmp	r3, #8
 80020fa:	d11b      	bne.n	8002134 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f06f 0208 	mvn.w	r2, #8
 8002104:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2204      	movs	r2, #4
 800210a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	69db      	ldr	r3, [r3, #28]
 8002112:	f003 0303 	and.w	r3, r3, #3
 8002116:	2b00      	cmp	r3, #0
 8002118:	d003      	beq.n	8002122 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	f000 f960 	bl	80023e0 <HAL_TIM_IC_CaptureCallback>
 8002120:	e005      	b.n	800212e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	f000 f953 	bl	80023ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002128:	6878      	ldr	r0, [r7, #4]
 800212a:	f000 f962 	bl	80023f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2200      	movs	r2, #0
 8002132:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	691b      	ldr	r3, [r3, #16]
 800213a:	f003 0310 	and.w	r3, r3, #16
 800213e:	2b10      	cmp	r3, #16
 8002140:	d122      	bne.n	8002188 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	f003 0310 	and.w	r3, r3, #16
 800214c:	2b10      	cmp	r3, #16
 800214e:	d11b      	bne.n	8002188 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f06f 0210 	mvn.w	r2, #16
 8002158:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2208      	movs	r2, #8
 800215e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	69db      	ldr	r3, [r3, #28]
 8002166:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800216a:	2b00      	cmp	r3, #0
 800216c:	d003      	beq.n	8002176 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f000 f936 	bl	80023e0 <HAL_TIM_IC_CaptureCallback>
 8002174:	e005      	b.n	8002182 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	f000 f929 	bl	80023ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800217c:	6878      	ldr	r0, [r7, #4]
 800217e:	f000 f938 	bl	80023f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2200      	movs	r2, #0
 8002186:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	691b      	ldr	r3, [r3, #16]
 800218e:	f003 0301 	and.w	r3, r3, #1
 8002192:	2b01      	cmp	r3, #1
 8002194:	d10e      	bne.n	80021b4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	68db      	ldr	r3, [r3, #12]
 800219c:	f003 0301 	and.w	r3, r3, #1
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d107      	bne.n	80021b4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f06f 0201 	mvn.w	r2, #1
 80021ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f7fe fce2 	bl	8000b78 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	691b      	ldr	r3, [r3, #16]
 80021ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021be:	2b80      	cmp	r3, #128	; 0x80
 80021c0:	d10e      	bne.n	80021e0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021cc:	2b80      	cmp	r3, #128	; 0x80
 80021ce:	d107      	bne.n	80021e0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80021d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f000 fa6b 	bl	80026b6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	691b      	ldr	r3, [r3, #16]
 80021e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021ea:	2b40      	cmp	r3, #64	; 0x40
 80021ec:	d10e      	bne.n	800220c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021f8:	2b40      	cmp	r3, #64	; 0x40
 80021fa:	d107      	bne.n	800220c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002204:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	f000 f8fc 	bl	8002404 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	691b      	ldr	r3, [r3, #16]
 8002212:	f003 0320 	and.w	r3, r3, #32
 8002216:	2b20      	cmp	r3, #32
 8002218:	d10e      	bne.n	8002238 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	f003 0320 	and.w	r3, r3, #32
 8002224:	2b20      	cmp	r3, #32
 8002226:	d107      	bne.n	8002238 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f06f 0220 	mvn.w	r2, #32
 8002230:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f000 fa36 	bl	80026a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002238:	bf00      	nop
 800223a:	3708      	adds	r7, #8
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}

08002240 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b084      	sub	sp, #16
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
 8002248:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800224a:	2300      	movs	r3, #0
 800224c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002254:	2b01      	cmp	r3, #1
 8002256:	d101      	bne.n	800225c <HAL_TIM_ConfigClockSource+0x1c>
 8002258:	2302      	movs	r3, #2
 800225a:	e0b4      	b.n	80023c6 <HAL_TIM_ConfigClockSource+0x186>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2201      	movs	r2, #1
 8002260:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2202      	movs	r2, #2
 8002268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800227a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002282:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	68ba      	ldr	r2, [r7, #8]
 800228a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002294:	d03e      	beq.n	8002314 <HAL_TIM_ConfigClockSource+0xd4>
 8002296:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800229a:	f200 8087 	bhi.w	80023ac <HAL_TIM_ConfigClockSource+0x16c>
 800229e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022a2:	f000 8086 	beq.w	80023b2 <HAL_TIM_ConfigClockSource+0x172>
 80022a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022aa:	d87f      	bhi.n	80023ac <HAL_TIM_ConfigClockSource+0x16c>
 80022ac:	2b70      	cmp	r3, #112	; 0x70
 80022ae:	d01a      	beq.n	80022e6 <HAL_TIM_ConfigClockSource+0xa6>
 80022b0:	2b70      	cmp	r3, #112	; 0x70
 80022b2:	d87b      	bhi.n	80023ac <HAL_TIM_ConfigClockSource+0x16c>
 80022b4:	2b60      	cmp	r3, #96	; 0x60
 80022b6:	d050      	beq.n	800235a <HAL_TIM_ConfigClockSource+0x11a>
 80022b8:	2b60      	cmp	r3, #96	; 0x60
 80022ba:	d877      	bhi.n	80023ac <HAL_TIM_ConfigClockSource+0x16c>
 80022bc:	2b50      	cmp	r3, #80	; 0x50
 80022be:	d03c      	beq.n	800233a <HAL_TIM_ConfigClockSource+0xfa>
 80022c0:	2b50      	cmp	r3, #80	; 0x50
 80022c2:	d873      	bhi.n	80023ac <HAL_TIM_ConfigClockSource+0x16c>
 80022c4:	2b40      	cmp	r3, #64	; 0x40
 80022c6:	d058      	beq.n	800237a <HAL_TIM_ConfigClockSource+0x13a>
 80022c8:	2b40      	cmp	r3, #64	; 0x40
 80022ca:	d86f      	bhi.n	80023ac <HAL_TIM_ConfigClockSource+0x16c>
 80022cc:	2b30      	cmp	r3, #48	; 0x30
 80022ce:	d064      	beq.n	800239a <HAL_TIM_ConfigClockSource+0x15a>
 80022d0:	2b30      	cmp	r3, #48	; 0x30
 80022d2:	d86b      	bhi.n	80023ac <HAL_TIM_ConfigClockSource+0x16c>
 80022d4:	2b20      	cmp	r3, #32
 80022d6:	d060      	beq.n	800239a <HAL_TIM_ConfigClockSource+0x15a>
 80022d8:	2b20      	cmp	r3, #32
 80022da:	d867      	bhi.n	80023ac <HAL_TIM_ConfigClockSource+0x16c>
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d05c      	beq.n	800239a <HAL_TIM_ConfigClockSource+0x15a>
 80022e0:	2b10      	cmp	r3, #16
 80022e2:	d05a      	beq.n	800239a <HAL_TIM_ConfigClockSource+0x15a>
 80022e4:	e062      	b.n	80023ac <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6818      	ldr	r0, [r3, #0]
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	6899      	ldr	r1, [r3, #8]
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	685a      	ldr	r2, [r3, #4]
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	68db      	ldr	r3, [r3, #12]
 80022f6:	f000 f95e 	bl	80025b6 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002308:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	68ba      	ldr	r2, [r7, #8]
 8002310:	609a      	str	r2, [r3, #8]
      break;
 8002312:	e04f      	b.n	80023b4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6818      	ldr	r0, [r3, #0]
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	6899      	ldr	r1, [r3, #8]
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	685a      	ldr	r2, [r3, #4]
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	f000 f947 	bl	80025b6 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	689a      	ldr	r2, [r3, #8]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002336:	609a      	str	r2, [r3, #8]
      break;
 8002338:	e03c      	b.n	80023b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6818      	ldr	r0, [r3, #0]
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	6859      	ldr	r1, [r3, #4]
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	68db      	ldr	r3, [r3, #12]
 8002346:	461a      	mov	r2, r3
 8002348:	f000 f8be 	bl	80024c8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	2150      	movs	r1, #80	; 0x50
 8002352:	4618      	mov	r0, r3
 8002354:	f000 f915 	bl	8002582 <TIM_ITRx_SetConfig>
      break;
 8002358:	e02c      	b.n	80023b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6818      	ldr	r0, [r3, #0]
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	6859      	ldr	r1, [r3, #4]
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	68db      	ldr	r3, [r3, #12]
 8002366:	461a      	mov	r2, r3
 8002368:	f000 f8dc 	bl	8002524 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	2160      	movs	r1, #96	; 0x60
 8002372:	4618      	mov	r0, r3
 8002374:	f000 f905 	bl	8002582 <TIM_ITRx_SetConfig>
      break;
 8002378:	e01c      	b.n	80023b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6818      	ldr	r0, [r3, #0]
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	6859      	ldr	r1, [r3, #4]
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	68db      	ldr	r3, [r3, #12]
 8002386:	461a      	mov	r2, r3
 8002388:	f000 f89e 	bl	80024c8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	2140      	movs	r1, #64	; 0x40
 8002392:	4618      	mov	r0, r3
 8002394:	f000 f8f5 	bl	8002582 <TIM_ITRx_SetConfig>
      break;
 8002398:	e00c      	b.n	80023b4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4619      	mov	r1, r3
 80023a4:	4610      	mov	r0, r2
 80023a6:	f000 f8ec 	bl	8002582 <TIM_ITRx_SetConfig>
      break;
 80023aa:	e003      	b.n	80023b4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	73fb      	strb	r3, [r7, #15]
      break;
 80023b0:	e000      	b.n	80023b4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80023b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2201      	movs	r2, #1
 80023b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2200      	movs	r2, #0
 80023c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80023c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	3710      	adds	r7, #16
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}

080023ce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80023ce:	b480      	push	{r7}
 80023d0:	b083      	sub	sp, #12
 80023d2:	af00      	add	r7, sp, #0
 80023d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80023d6:	bf00      	nop
 80023d8:	370c      	adds	r7, #12
 80023da:	46bd      	mov	sp, r7
 80023dc:	bc80      	pop	{r7}
 80023de:	4770      	bx	lr

080023e0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b083      	sub	sp, #12
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80023e8:	bf00      	nop
 80023ea:	370c      	adds	r7, #12
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bc80      	pop	{r7}
 80023f0:	4770      	bx	lr

080023f2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80023f2:	b480      	push	{r7}
 80023f4:	b083      	sub	sp, #12
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80023fa:	bf00      	nop
 80023fc:	370c      	adds	r7, #12
 80023fe:	46bd      	mov	sp, r7
 8002400:	bc80      	pop	{r7}
 8002402:	4770      	bx	lr

08002404 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002404:	b480      	push	{r7}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800240c:	bf00      	nop
 800240e:	370c      	adds	r7, #12
 8002410:	46bd      	mov	sp, r7
 8002412:	bc80      	pop	{r7}
 8002414:	4770      	bx	lr
	...

08002418 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002418:	b480      	push	{r7}
 800241a:	b085      	sub	sp, #20
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
 8002420:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	4a25      	ldr	r2, [pc, #148]	; (80024c0 <TIM_Base_SetConfig+0xa8>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d007      	beq.n	8002440 <TIM_Base_SetConfig+0x28>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002436:	d003      	beq.n	8002440 <TIM_Base_SetConfig+0x28>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	4a22      	ldr	r2, [pc, #136]	; (80024c4 <TIM_Base_SetConfig+0xac>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d108      	bne.n	8002452 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002446:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	68fa      	ldr	r2, [r7, #12]
 800244e:	4313      	orrs	r3, r2
 8002450:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	4a1a      	ldr	r2, [pc, #104]	; (80024c0 <TIM_Base_SetConfig+0xa8>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d007      	beq.n	800246a <TIM_Base_SetConfig+0x52>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002460:	d003      	beq.n	800246a <TIM_Base_SetConfig+0x52>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	4a17      	ldr	r2, [pc, #92]	; (80024c4 <TIM_Base_SetConfig+0xac>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d108      	bne.n	800247c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002470:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	68db      	ldr	r3, [r3, #12]
 8002476:	68fa      	ldr	r2, [r7, #12]
 8002478:	4313      	orrs	r3, r2
 800247a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	695b      	ldr	r3, [r3, #20]
 8002486:	4313      	orrs	r3, r2
 8002488:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	68fa      	ldr	r2, [r7, #12]
 800248e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	689a      	ldr	r2, [r3, #8]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	4a07      	ldr	r2, [pc, #28]	; (80024c0 <TIM_Base_SetConfig+0xa8>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d103      	bne.n	80024b0 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	691a      	ldr	r2, [r3, #16]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2201      	movs	r2, #1
 80024b4:	615a      	str	r2, [r3, #20]
}
 80024b6:	bf00      	nop
 80024b8:	3714      	adds	r7, #20
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bc80      	pop	{r7}
 80024be:	4770      	bx	lr
 80024c0:	40012c00 	.word	0x40012c00
 80024c4:	40000400 	.word	0x40000400

080024c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b087      	sub	sp, #28
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	60f8      	str	r0, [r7, #12]
 80024d0:	60b9      	str	r1, [r7, #8]
 80024d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	6a1b      	ldr	r3, [r3, #32]
 80024d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	6a1b      	ldr	r3, [r3, #32]
 80024de:	f023 0201 	bic.w	r2, r3, #1
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	699b      	ldr	r3, [r3, #24]
 80024ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80024f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	011b      	lsls	r3, r3, #4
 80024f8:	693a      	ldr	r2, [r7, #16]
 80024fa:	4313      	orrs	r3, r2
 80024fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	f023 030a 	bic.w	r3, r3, #10
 8002504:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002506:	697a      	ldr	r2, [r7, #20]
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	4313      	orrs	r3, r2
 800250c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	693a      	ldr	r2, [r7, #16]
 8002512:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	697a      	ldr	r2, [r7, #20]
 8002518:	621a      	str	r2, [r3, #32]
}
 800251a:	bf00      	nop
 800251c:	371c      	adds	r7, #28
 800251e:	46bd      	mov	sp, r7
 8002520:	bc80      	pop	{r7}
 8002522:	4770      	bx	lr

08002524 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002524:	b480      	push	{r7}
 8002526:	b087      	sub	sp, #28
 8002528:	af00      	add	r7, sp, #0
 800252a:	60f8      	str	r0, [r7, #12]
 800252c:	60b9      	str	r1, [r7, #8]
 800252e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	6a1b      	ldr	r3, [r3, #32]
 8002534:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	6a1b      	ldr	r3, [r3, #32]
 800253a:	f023 0210 	bic.w	r2, r3, #16
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	699b      	ldr	r3, [r3, #24]
 8002546:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800254e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	031b      	lsls	r3, r3, #12
 8002554:	693a      	ldr	r2, [r7, #16]
 8002556:	4313      	orrs	r3, r2
 8002558:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002560:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	011b      	lsls	r3, r3, #4
 8002566:	697a      	ldr	r2, [r7, #20]
 8002568:	4313      	orrs	r3, r2
 800256a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	693a      	ldr	r2, [r7, #16]
 8002570:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	697a      	ldr	r2, [r7, #20]
 8002576:	621a      	str	r2, [r3, #32]
}
 8002578:	bf00      	nop
 800257a:	371c      	adds	r7, #28
 800257c:	46bd      	mov	sp, r7
 800257e:	bc80      	pop	{r7}
 8002580:	4770      	bx	lr

08002582 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002582:	b480      	push	{r7}
 8002584:	b085      	sub	sp, #20
 8002586:	af00      	add	r7, sp, #0
 8002588:	6078      	str	r0, [r7, #4]
 800258a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002598:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800259a:	683a      	ldr	r2, [r7, #0]
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	4313      	orrs	r3, r2
 80025a0:	f043 0307 	orr.w	r3, r3, #7
 80025a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	68fa      	ldr	r2, [r7, #12]
 80025aa:	609a      	str	r2, [r3, #8]
}
 80025ac:	bf00      	nop
 80025ae:	3714      	adds	r7, #20
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bc80      	pop	{r7}
 80025b4:	4770      	bx	lr

080025b6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80025b6:	b480      	push	{r7}
 80025b8:	b087      	sub	sp, #28
 80025ba:	af00      	add	r7, sp, #0
 80025bc:	60f8      	str	r0, [r7, #12]
 80025be:	60b9      	str	r1, [r7, #8]
 80025c0:	607a      	str	r2, [r7, #4]
 80025c2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80025d0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	021a      	lsls	r2, r3, #8
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	431a      	orrs	r2, r3
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	4313      	orrs	r3, r2
 80025de:	697a      	ldr	r2, [r7, #20]
 80025e0:	4313      	orrs	r3, r2
 80025e2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	697a      	ldr	r2, [r7, #20]
 80025e8:	609a      	str	r2, [r3, #8]
}
 80025ea:	bf00      	nop
 80025ec:	371c      	adds	r7, #28
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bc80      	pop	{r7}
 80025f2:	4770      	bx	lr

080025f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b085      	sub	sp, #20
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
 80025fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002604:	2b01      	cmp	r3, #1
 8002606:	d101      	bne.n	800260c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002608:	2302      	movs	r3, #2
 800260a:	e041      	b.n	8002690 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2201      	movs	r2, #1
 8002610:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2202      	movs	r2, #2
 8002618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002632:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	68fa      	ldr	r2, [r7, #12]
 800263a:	4313      	orrs	r3, r2
 800263c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	68fa      	ldr	r2, [r7, #12]
 8002644:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a14      	ldr	r2, [pc, #80]	; (800269c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d009      	beq.n	8002664 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002658:	d004      	beq.n	8002664 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a10      	ldr	r2, [pc, #64]	; (80026a0 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d10c      	bne.n	800267e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800266a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	68ba      	ldr	r2, [r7, #8]
 8002672:	4313      	orrs	r3, r2
 8002674:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	68ba      	ldr	r2, [r7, #8]
 800267c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2201      	movs	r2, #1
 8002682:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2200      	movs	r2, #0
 800268a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800268e:	2300      	movs	r3, #0
}
 8002690:	4618      	mov	r0, r3
 8002692:	3714      	adds	r7, #20
 8002694:	46bd      	mov	sp, r7
 8002696:	bc80      	pop	{r7}
 8002698:	4770      	bx	lr
 800269a:	bf00      	nop
 800269c:	40012c00 	.word	0x40012c00
 80026a0:	40000400 	.word	0x40000400

080026a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b083      	sub	sp, #12
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80026ac:	bf00      	nop
 80026ae:	370c      	adds	r7, #12
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bc80      	pop	{r7}
 80026b4:	4770      	bx	lr

080026b6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80026b6:	b480      	push	{r7}
 80026b8:	b083      	sub	sp, #12
 80026ba:	af00      	add	r7, sp, #0
 80026bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80026be:	bf00      	nop
 80026c0:	370c      	adds	r7, #12
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bc80      	pop	{r7}
 80026c6:	4770      	bx	lr

080026c8 <__libc_init_array>:
 80026c8:	b570      	push	{r4, r5, r6, lr}
 80026ca:	2600      	movs	r6, #0
 80026cc:	4d0c      	ldr	r5, [pc, #48]	; (8002700 <__libc_init_array+0x38>)
 80026ce:	4c0d      	ldr	r4, [pc, #52]	; (8002704 <__libc_init_array+0x3c>)
 80026d0:	1b64      	subs	r4, r4, r5
 80026d2:	10a4      	asrs	r4, r4, #2
 80026d4:	42a6      	cmp	r6, r4
 80026d6:	d109      	bne.n	80026ec <__libc_init_array+0x24>
 80026d8:	f000 f822 	bl	8002720 <_init>
 80026dc:	2600      	movs	r6, #0
 80026de:	4d0a      	ldr	r5, [pc, #40]	; (8002708 <__libc_init_array+0x40>)
 80026e0:	4c0a      	ldr	r4, [pc, #40]	; (800270c <__libc_init_array+0x44>)
 80026e2:	1b64      	subs	r4, r4, r5
 80026e4:	10a4      	asrs	r4, r4, #2
 80026e6:	42a6      	cmp	r6, r4
 80026e8:	d105      	bne.n	80026f6 <__libc_init_array+0x2e>
 80026ea:	bd70      	pop	{r4, r5, r6, pc}
 80026ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80026f0:	4798      	blx	r3
 80026f2:	3601      	adds	r6, #1
 80026f4:	e7ee      	b.n	80026d4 <__libc_init_array+0xc>
 80026f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80026fa:	4798      	blx	r3
 80026fc:	3601      	adds	r6, #1
 80026fe:	e7f2      	b.n	80026e6 <__libc_init_array+0x1e>
 8002700:	0800275c 	.word	0x0800275c
 8002704:	0800275c 	.word	0x0800275c
 8002708:	0800275c 	.word	0x0800275c
 800270c:	08002760 	.word	0x08002760

08002710 <memset>:
 8002710:	4603      	mov	r3, r0
 8002712:	4402      	add	r2, r0
 8002714:	4293      	cmp	r3, r2
 8002716:	d100      	bne.n	800271a <memset+0xa>
 8002718:	4770      	bx	lr
 800271a:	f803 1b01 	strb.w	r1, [r3], #1
 800271e:	e7f9      	b.n	8002714 <memset+0x4>

08002720 <_init>:
 8002720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002722:	bf00      	nop
 8002724:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002726:	bc08      	pop	{r3}
 8002728:	469e      	mov	lr, r3
 800272a:	4770      	bx	lr

0800272c <_fini>:
 800272c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800272e:	bf00      	nop
 8002730:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002732:	bc08      	pop	{r3}
 8002734:	469e      	mov	lr, r3
 8002736:	4770      	bx	lr
